{
  "data": {
    "type": "provider-docs",
    "id": "3199095",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"VPC (Virtual Private Cloud)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_vpc_peering_connection\"\ndescription: |-\n  Provides a resource to manage a VPC peering connection.\n---\n\n# Resource: aws_vpc_peering_connection\n\nProvides a resource to manage a VPC peering connection.\n\n~> **NOTE on VPC Peering Connections and VPC Peering Connection Options:** Terraform provides\nboth a standalone [VPC Peering Connection Options](vpc_peering_connection_options.html) and a VPC Peering Connection\nresource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering\nconnection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.\nDoing so will cause a conflict of options and will overwrite the options.\nUsing a VPC Peering Connection Options resource decouples management of the connection options from\nmanagement of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.\n\n-> **Note:** For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region\nVPC Peering Connections use the `aws_vpc_peering_connection` resource to manage the requester's side of the\nconnection and use the `aws_vpc_peering_connection_accepter` resource to manage the accepter's side of the connection.\n\n-> **Note:** Creating multiple `aws_vpc_peering_connection` resources with the same `peer_vpc_id` and `vpc_id` will not produce an error. Instead, AWS will return the connection `id` that already exists, resulting in multiple `aws_vpc_peering_connection` resources with the same `id`.\n\n## Example Usage\n\n```terraform\nresource \"aws_vpc_peering_connection\" \"foo\" {\n  peer_owner_id = var.peer_owner_id\n  peer_vpc_id   = aws_vpc.bar.id\n  vpc_id        = aws_vpc.foo.id\n}\n```\n\nBasic usage with connection options:\n\n```terraform\nresource \"aws_vpc_peering_connection\" \"foo\" {\n  peer_owner_id = var.peer_owner_id\n  peer_vpc_id   = aws_vpc.bar.id\n  vpc_id        = aws_vpc.foo.id\n\n  accepter {\n    allow_remote_vpc_dns_resolution = true\n  }\n\n  requester {\n    allow_remote_vpc_dns_resolution = true\n  }\n}\n```\n\nBasic usage with tags:\n\n```terraform\nresource \"aws_vpc_peering_connection\" \"foo\" {\n  peer_owner_id = var.peer_owner_id\n  peer_vpc_id   = aws_vpc.bar.id\n  vpc_id        = aws_vpc.foo.id\n  auto_accept   = true\n\n  tags = {\n    Name = \"VPC Peering between foo and bar\"\n  }\n}\n\nresource \"aws_vpc\" \"foo\" {\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_vpc\" \"bar\" {\n  cidr_block = \"10.2.0.0/16\"\n}\n```\n\nBasic usage with region:\n\n```terraform\nresource \"aws_vpc_peering_connection\" \"foo\" {\n  peer_owner_id = var.peer_owner_id\n  peer_vpc_id   = aws_vpc.bar.id\n  vpc_id        = aws_vpc.foo.id\n  peer_region   = \"us-east-1\"\n}\n\nresource \"aws_vpc\" \"foo\" {\n  provider   = aws.us-west-2\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_vpc\" \"bar\" {\n  provider   = aws.us-east-1\n  cidr_block = \"10.2.0.0/16\"\n}\n```\n\n## Argument Reference\n\n-> **Note:** Modifying the VPC Peering Connection options requires peering to be active. An automatic activation\ncan be done using the [`auto_accept`](vpc_peering_connection.html#auto_accept) attribute. Alternatively, the VPC Peering\nConnection has to be made active manually using other means. See [notes](vpc_peering_connection.html#notes) below for\nmore information.\n\nThis argument supports the following arguments:\n\n* `peer_owner_id` - (Optional) The AWS account ID of the owner of the peer VPC.\n   Defaults to the account ID the [AWS provider][1] is currently connected to.\n* `peer_vpc_id` - (Required) The ID of the VPC with which you are creating the VPC Peering Connection.\n* `vpc_id` - (Required) The ID of the requester VPC.\n* `auto_accept` - (Optional) Accept the peering (both VPCs need to be in the same AWS account and region).\n* `peer_region` - (Optional) The region of the accepter VPC of the VPC Peering Connection. `auto_accept` must be `false`,\nand use the `aws_vpc_peering_connection_accepter` to manage the accepter side.\n* `accepter` (Optional) - An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts\nthe peering connection (a maximum of one).\n* `requester` (Optional) - A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests\nthe peering connection (a maximum of one).\n* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n\n#### Accepter and Requester Arguments\n\n-> **Note:** When enabled, the DNS resolution feature requires that VPCs participating in the peering\nmust have support for the DNS hostnames enabled. This can be done using the [`enable_dns_hostnames`](vpc.html#enable_dns_hostnames) attribute in the [`aws_vpc`](vpc.html) resource. See [Using DNS with Your VPC](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html) user guide for more information.\n\n* `allow_remote_vpc_dns_resolution` - (Optional) Allow a local VPC to resolve public DNS hostnames to\nprivate IP addresses when queried from instances in the peer VPC.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - The ID of the VPC Peering Connection.\n* `accept_status` - The status of the VPC Peering Connection request.\n* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n\n## Notes\n\nIf both VPCs are not in the same AWS account and region do not enable the `auto_accept` attribute.\nThe accepter can manage its side of the connection using the `aws_vpc_peering_connection_accepter` resource\nor accept the connection manually using the AWS Management Console, AWS CLI, through SDKs, etc.\n\n## Timeouts\n\n[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):\n\n- `create` - (Default `1m`)\n- `update` - (Default `1m`)\n- `delete` - (Default `1m`)\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Peering resources using the VPC peering `id`. For example:\n\n```terraform\nimport {\n  to = aws_vpc_peering_connection.test_connection\n  id = \"pcx-111aaa111\"\n}\n```\n\nUsing `terraform import`, import VPC Peering resources using the VPC peering `id`. For example:\n\n```console\n% terraform import aws_vpc_peering_connection.test_connection pcx-111aaa111\n```\n\n[1]: /docs/providers/aws/index.html\n",
      "language": "hcl",
      "path": "website/docs/r/vpc_peering_connection.html.markdown",
      "slug": "vpc_peering_connection",
      "subcategory": "VPC (Virtual Private Cloud)",
      "title": "vpc_peering_connection",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3199095"
    }
  }
}