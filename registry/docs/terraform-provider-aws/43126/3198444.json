{
  "data": {
    "type": "provider-docs",
    "id": "3198444",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"Glue\"\nlayout: \"aws\"\npage_title: \"AWS: aws_glue_trigger\"\ndescription: |-\n  Manages a Glue Trigger resource.\n---\n\n# Resource: aws_glue_trigger\n\nManages a Glue Trigger resource.\n\n## Example Usage\n\n### Conditional Trigger\n\n```terraform\nresource \"aws_glue_trigger\" \"example\" {\n  name = \"example\"\n  type = \"CONDITIONAL\"\n\n  actions {\n    job_name = aws_glue_job.example1.name\n  }\n\n  predicate {\n    conditions {\n      job_name = aws_glue_job.example2.name\n      state    = \"SUCCEEDED\"\n    }\n  }\n}\n```\n\n### On-Demand Trigger\n\n```terraform\nresource \"aws_glue_trigger\" \"example\" {\n  name = \"example\"\n  type = \"ON_DEMAND\"\n\n  actions {\n    job_name = aws_glue_job.example.name\n  }\n}\n```\n\n### Scheduled Trigger\n\n```terraform\nresource \"aws_glue_trigger\" \"example\" {\n  name     = \"example\"\n  schedule = \"cron(15 12 * * ? *)\"\n  type     = \"SCHEDULED\"\n\n  actions {\n    job_name = aws_glue_job.example.name\n  }\n}\n```\n\n### Conditional Trigger with Crawler Action\n\n**Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.\n\n```terraform\nresource \"aws_glue_trigger\" \"example\" {\n  name = \"example\"\n  type = \"CONDITIONAL\"\n\n  actions {\n    crawler_name = aws_glue_crawler.example1.name\n  }\n\n  predicate {\n    conditions {\n      job_name = aws_glue_job.example2.name\n      state    = \"SUCCEEDED\"\n    }\n  }\n}\n```\n\n### Conditional Trigger with Crawler Condition\n\n**Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.\n\n```terraform\nresource \"aws_glue_trigger\" \"example\" {\n  name = \"example\"\n  type = \"CONDITIONAL\"\n\n  actions {\n    job_name = aws_glue_job.example1.name\n  }\n\n  predicate {\n    conditions {\n      crawler_name = aws_glue_crawler.example2.name\n      crawl_state  = \"SUCCEEDED\"\n    }\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `actions` – (Required) List of actions initiated by this trigger when it fires. See [Actions](#actions) Below.\n* `description` – (Optional) A description of the new trigger.\n* `enabled` – (Optional) Start the trigger. Defaults to `true`.\n* `name` – (Required) The name of the trigger.\n* `predicate` – (Optional) A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See [Predicate](#predicate) Below.\n* `schedule` – (Optional) A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)\n* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n* `start_on_creation` – (Optional) Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.\n* `type` – (Required) The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.\n* `workflow_name` - (Optional) A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.\n* `event_batching_condition` - (Optional) Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See [Event Batching Condition](#event-batching-condition).\n\n### Actions\n\n* `arguments` - (Optional) Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.\n* `crawler_name` - (Optional) The name of the crawler to be executed. Conflicts with `job_name`.\n* `job_name` - (Optional) The name of a job to be executed. Conflicts with `crawler_name`.\n* `timeout` - (Optional) The job run timeout in minutes. It overrides the timeout value of the job.\n* `security_configuration` - (Optional) The name of the Security Configuration structure to be used with this action.\n* `notification_property` - (Optional) Specifies configuration properties of a job run notification. See [Notification Property](#notification-property) details below.\n\n#### Notification Property\n\n* `notify_delay_after` - (Optional) After a job run starts, the number of minutes to wait before sending a job run delay notification.\n\n### Predicate\n\n* `conditions` - (Required) A list of the conditions that determine when the trigger will fire. See [Conditions](#conditions).\n* `logical` - (Optional) How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.\n\n#### Conditions\n\n* `job_name` - (Optional) The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawler_name`.\n* `state` - (Optional) The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.\n* `crawler_name` - (Optional) The name of the crawler to watch. If this is specified, `crawl_state` must also be specified. Conflicts with `job_name`.\n* `crawl_state` - (Optional) The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawler_name` must also be specified. Conflicts with `state`.\n* `logical_operator` - (Optional) A logical operator. Defaults to `EQUALS`.\n\n### Event Batching Condition\n\n* `batch_size` - (Required)Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.\n* `batch_window` - (Optional) Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - Amazon Resource Name (ARN) of Glue Trigger\n* `id` - Trigger name\n* `state` - The current state of the trigger.\n* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n\n## Timeouts\n\n[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):\n\n- `create` - (Default `5m`)\n- `delete` - (Default `5m`)\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Triggers using `name`. For example:\n\n```terraform\nimport {\n  to = aws_glue_trigger.MyTrigger\n  id = \"MyTrigger\"\n}\n```\n\nUsing `terraform import`, import Glue Triggers using `name`. For example:\n\n```console\n% terraform import aws_glue_trigger.MyTrigger MyTrigger\n```\n",
      "language": "hcl",
      "path": "website/docs/r/glue_trigger.html.markdown",
      "slug": "glue_trigger",
      "subcategory": "Glue",
      "title": "glue_trigger",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198444"
    }
  }
}