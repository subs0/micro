{
  "data": {
    "type": "provider-docs",
    "id": "3199097",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"VPC (Virtual Private Cloud)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_vpc_peering_connection_options\"\ndescription: |-\n  Provides a resource to manage VPC peering connection options.\n---\n\n# Resource: aws_vpc_peering_connection_options\n\nProvides a resource to manage VPC peering connection options.\n\n~> **NOTE on VPC Peering Connections and VPC Peering Connection Options:** Terraform provides\nboth a standalone VPC Peering Connection Options and a [VPC Peering Connection](vpc_peering_connection.html)\nresource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering\nconnection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.\nDoing so will cause a conflict of options and will overwrite the options.\nUsing a VPC Peering Connection Options resource decouples management of the connection options from\nmanagement of the VPC Peering Connection and allows options to be set correctly in cross-region and\ncross-account scenarios.\n\n## Example Usage\n\n### Basic Usage\n\n```terraform\nresource \"aws_vpc\" \"foo\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_vpc\" \"bar\" {\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_vpc_peering_connection\" \"foo\" {\n  vpc_id      = aws_vpc.foo.id\n  peer_vpc_id = aws_vpc.bar.id\n  auto_accept = true\n}\n\nresource \"aws_vpc_peering_connection_options\" \"foo\" {\n  vpc_peering_connection_id = aws_vpc_peering_connection.foo.id\n\n  accepter {\n    allow_remote_vpc_dns_resolution = true\n  }\n}\n```\n\n### Cross-Account Usage\n\n```terraform\nprovider \"aws\" {\n  alias = \"requester\"\n\n  # Requester's credentials.\n}\n\nprovider \"aws\" {\n  alias = \"accepter\"\n\n  # Accepter's credentials.\n}\n\nresource \"aws_vpc\" \"main\" {\n  provider = aws.requester\n\n  cidr_block = \"10.0.0.0/16\"\n\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n}\n\nresource \"aws_vpc\" \"peer\" {\n  provider = aws.accepter\n\n  cidr_block = \"10.1.0.0/16\"\n\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n}\n\ndata \"aws_caller_identity\" \"peer\" {\n  provider = aws.accepter\n}\n\n# Requester's side of the connection.\nresource \"aws_vpc_peering_connection\" \"peer\" {\n  provider = aws.requester\n\n  vpc_id        = aws_vpc.main.id\n  peer_vpc_id   = aws_vpc.peer.id\n  peer_owner_id = data.aws_caller_identity.peer.account_id\n  auto_accept   = false\n\n  tags = {\n    Side = \"Requester\"\n  }\n}\n\n# Accepter's side of the connection.\nresource \"aws_vpc_peering_connection_accepter\" \"peer\" {\n  provider = aws.accepter\n\n  vpc_peering_connection_id = aws_vpc_peering_connection.peer.id\n  auto_accept               = true\n\n  tags = {\n    Side = \"Accepter\"\n  }\n}\n\nresource \"aws_vpc_peering_connection_options\" \"requester\" {\n  provider = aws.requester\n\n  # As options can't be set until the connection has been accepted\n  # create an explicit dependency on the accepter.\n  vpc_peering_connection_id = aws_vpc_peering_connection_accepter.peer.id\n\n  requester {\n    allow_remote_vpc_dns_resolution = true\n  }\n}\n\nresource \"aws_vpc_peering_connection_options\" \"accepter\" {\n  provider = aws.accepter\n\n  vpc_peering_connection_id = aws_vpc_peering_connection_accepter.peer.id\n\n  accepter {\n    allow_remote_vpc_dns_resolution = true\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `vpc_peering_connection_id` - (Required) The ID of the requester VPC peering connection.\n* `accepter` (Optional) - An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that acceptsthe peering connection (a maximum of one).\n* `requester` (Optional) - A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requeststhe peering connection (a maximum of one).\n\n#### Accepter and Requester Arguments\n\n-> **Note:** When enabled, the DNS resolution feature requires that VPCs participating in the peering must have support for the DNS hostnames enabled. This can be done using the [`enable_dns_hostnames`](vpc.html#enable_dns_hostnames) attribute in the [`aws_vpc`](vpc.html) resource. See [Using DNS with Your VPC](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html) user guide for more information.\n\n* `allow_remote_vpc_dns_resolution` - (Optional) Allow a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - The ID of the VPC Peering Connection Options.\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Peering Connection Options using the VPC peering `id`. For example:\n\n```terraform\nimport {\n  to = aws_vpc_peering_connection_options.foo\n  id = \"pcx-111aaa111\"\n}\n```\n\nUsing `terraform import`, import VPC Peering Connection Options using the VPC peering `id`. For example:\n\n```console\n% terraform import aws_vpc_peering_connection_options.foo pcx-111aaa111\n```\n",
      "language": "hcl",
      "path": "website/docs/r/vpc_peering_connection_options.html.markdown",
      "slug": "vpc_peering_connection_options",
      "subcategory": "VPC (Virtual Private Cloud)",
      "title": "vpc_peering_connection_options",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3199097"
    }
  }
}