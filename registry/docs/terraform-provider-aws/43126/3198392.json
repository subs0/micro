{
  "data": {
    "type": "provider-docs",
    "id": "3198392",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"CloudWatch Evidently\"\nlayout: \"aws\"\npage_title: \"AWS: aws_evidently_launch\"\ndescription: |-\n  Provides a CloudWatch Evidently Launch resource.\n---\n\n# Resource: aws_evidently_launch\n\nProvides a CloudWatch Evidently Launch resource.\n\n## Example Usage\n\n### Basic\n\n```terraform\nresource \"aws_evidently_launch\" \"example\" {\n  name    = \"example\"\n  project = aws_evidently_project.example.name\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation1\"\n    variation = \"Variation1\"\n  }\n\n  scheduled_splits_config {\n    steps {\n      group_weights = {\n        \"Variation1\" = 0\n      }\n      start_time = \"2024-01-07 01:43:59+00:00\"\n    }\n  }\n}\n```\n\n### With description\n\n```terraform\nresource \"aws_evidently_launch\" \"example\" {\n  name        = \"example\"\n  project     = aws_evidently_project.example.name\n  description = \"example description\"\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation1\"\n    variation = \"Variation1\"\n  }\n\n  scheduled_splits_config {\n    steps {\n      group_weights = {\n        \"Variation1\" = 0\n      }\n      start_time = \"2024-01-07 01:43:59+00:00\"\n    }\n  }\n}\n```\n\n### With multiple groups\n\n```terraform\nresource \"aws_evidently_launch\" \"example\" {\n  name    = \"example\"\n  project = aws_evidently_project.example.name\n\n  groups {\n    feature     = aws_evidently_feature.example.name\n    name        = \"Variation1\"\n    variation   = \"Variation1\"\n    description = \"first-group\"\n  }\n\n  groups {\n    feature     = aws_evidently_feature.example.name\n    name        = \"Variation2\"\n    variation   = \"Variation2\"\n    description = \"second-group\"\n  }\n\n  scheduled_splits_config {\n    steps {\n      group_weights = {\n        \"Variation1\" = 0\n        \"Variation2\" = 0\n      }\n      start_time = \"2024-01-07 01:43:59+00:00\"\n    }\n  }\n}\n```\n\n### With metric_monitors\n\n```terraform\nresource \"aws_evidently_launch\" \"example\" {\n  name    = \"example\"\n  project = aws_evidently_project.example.name\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation1\"\n    variation = \"Variation1\"\n  }\n\n  metric_monitors {\n    metric_definition {\n      entity_id_key = \"entity_id_key1\"\n      event_pattern = \"{\\\"Price\\\":[{\\\"numeric\\\":[\\\">\\\",11,\\\"<=\\\",22]}]}\"\n      name          = \"name1\"\n      unit_label    = \"unit_label1\"\n      value_key     = \"value_key1\"\n    }\n  }\n\n  metric_monitors {\n    metric_definition {\n      entity_id_key = \"entity_id_key2\"\n      event_pattern = \"{\\\"Price\\\":[{\\\"numeric\\\":[\\\">\\\",9,\\\"<=\\\",19]}]}\"\n      name          = \"name2\"\n      unit_label    = \"unit_label2\"\n      value_key     = \"value_key2\"\n    }\n  }\n\n  scheduled_splits_config {\n    steps {\n      group_weights = {\n        \"Variation1\" = 0\n      }\n      start_time = \"2024-01-07 01:43:59+00:00\"\n    }\n  }\n}\n```\n\n### With randomization_salt\n\n```terraform\nresource \"aws_evidently_launch\" \"example\" {\n  name               = \"example\"\n  project            = aws_evidently_project.example.name\n  randomization_salt = \"example randomization salt\"\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation1\"\n    variation = \"Variation1\"\n  }\n\n  scheduled_splits_config {\n    steps {\n      group_weights = {\n        \"Variation1\" = 0\n      }\n      start_time = \"2024-01-07 01:43:59+00:00\"\n    }\n  }\n}\n```\n\n### With multiple steps\n\n```terraform\nresource \"aws_evidently_launch\" \"example\" {\n  name    = \"example\"\n  project = aws_evidently_project.example.name\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation1\"\n    variation = \"Variation1\"\n  }\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation2\"\n    variation = \"Variation2\"\n  }\n\n  scheduled_splits_config {\n    steps {\n      group_weights = {\n        \"Variation1\" = 15\n        \"Variation2\" = 10\n      }\n      start_time = \"2024-01-07 01:43:59+00:00\"\n    }\n\n    steps {\n      group_weights = {\n        \"Variation1\" = 20\n        \"Variation2\" = 25\n      }\n      start_time = \"2024-01-08 01:43:59+00:00\"\n    }\n  }\n}\n```\n\n### With segment overrides\n\n```terraform\nresource \"aws_evidently_launch\" \"example\" {\n  name    = \"example\"\n  project = aws_evidently_project.example.name\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation1\"\n    variation = \"Variation1\"\n  }\n\n  groups {\n    feature   = aws_evidently_feature.example.name\n    name      = \"Variation2\"\n    variation = \"Variation2\"\n  }\n\n  scheduled_splits_config {\n    steps {\n      group_weights = {\n        \"Variation1\" = 0\n        \"Variation2\" = 0\n      }\n\n      segment_overrides {\n        evaluation_order = 1\n        segment          = aws_evidently_segment.example.name\n\n        weights = {\n          \"Variation2\" = 10000\n        }\n      }\n\n      segment_overrides {\n        evaluation_order = 2\n        segment          = aws_evidently_segment.example.name\n\n        weights = {\n          \"Variation1\" = 40000\n          \"Variation2\" = 30000\n        }\n      }\n\n      start_time = \"2024-01-08 01:43:59+00:00\"\n    }\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `description` - (Optional) Specifies the description of the launch.\n* `groups` - (Required) One or up to five blocks that contain the feature and variations that are to be used for the launch. [Detailed below](#groups).\n* `metric_monitors` - (Optional) One or up to three blocks that define the metrics that will be used to monitor the launch performance. [Detailed below](#metric_monitors).\n* `name` - (Required) The name for the new launch. Minimum length of `1`. Maximum length of `127`.\n* `project` - (Required) The name or ARN of the project that is to contain the new launch.\n* `randomization_salt` - (Optional) When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.\n* `scheduled_splits_config` - (Optional) A block that defines the traffic allocation percentages among the feature variations during each step of the launch. [Detailed below](#scheduled_splits_config).\n* `tags` - (Optional) Tags to apply to the launch. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n\n### `groups`\n\nThe `groups` block supports the following arguments:\n\n* `description` - (Optional) Specifies the description of the launch group.\n* `feature` - (Required) Specifies the name of the feature that the launch is using.\n* `name` - (Required) Specifies the name of the lahnch group.\n* `variation` - (Required) Specifies the feature variation to use for this launch group.\n\n### `metric_monitors`\n\nThe `metric_monitors` block supports the following arguments:\n\n* `metric_definition` - (Required) A block that defines the metric. [Detailed below](#metric_definition).\n\n#### `metric_definition`\n\nThe `metric_definition` block supports the following arguments:\n\n* `entity_id_key` - (Required) Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.\n* `event_pattern` - (Required) Specifies The EventBridge event pattern that defines how the metric is recorded.\n* `name` - (Required) Specifies the name for the metric.\n* `unit_label` - (Optional) Specifies a label for the units that the metric is measuring.\n* `value_key` - (Required) Specifies the value that is tracked to produce the metric.\n\n### `scheduled_splits_config`\n\nThe `scheduled_splits_config` block supports the following arguments:\n\n* `steps` - (Required) One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. [Detailed below](#steps).\n\n#### `steps`\n\nThe `steps` block supports the following arguments:\n\n* `group_weights` - (Required) The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).\n* `segment_overrides` - (Required) One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. [Detailed below](#segment_overrides).\n* `start_time` - (Required) Specifies the date and time that this step of the launch starts.\n\n##### `segment_overrides`\n\n* `evaluation_order` - (Required) Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.\n* `segment` - (Required) The name or ARN of the segment to use.\n* `weights` - (Required) The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.\n\n## Timeouts\n\n[Configuration options](https://www.terraform.io/docs/configuration/blocks/resources/syntax.html#operation-timeouts):\n\n* `create` - (Default `2m`)\n* `delete` - (Default `2m`)\n* `update` - (Default `2m`)\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - The ARN of the launch.\n* `created_time` - The date and time that the launch is created.\n* `execution` - A block that contains information about the start and end times of the launch. [Detailed below](#execution)\n* `id` - The launch `name` and the project `name` or `arn` separated by a colon (`:`).\n* `last_updated_time` - The date and time that the launch was most recently updated.\n* `status` - The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.\n* `status_reason` - If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.\n* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).\n* `type` - The type of launch.\n\n### `execution`\n\nThe `execution` block supports the following attributes:\n\n* `ended_time` - The date and time that the launch ended.\n* `started_time` - The date and time that the launch started.\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CloudWatch Evidently Launch using the `name` of the launch and `name` of the project or `arn` of the hosting CloudWatch Evidently Project separated by a `:`. For example:\n\nImport using the `name` of the launch and `name` of the project separated by a `:`:\n\n```terraform\nimport {\n  to = aws_evidently_launch.example\n  id = \"exampleLaunchName:exampleProjectName\"\n}\n```\n\nImport using the `name` of the launch and `arn` of the project separated by a `:`:\n\n```terraform\nimport {\n  to = aws_evidently_launch.example\n  id = \"exampleLaunchName:arn:aws:evidently:us-east-1:123456789012:project/exampleProjectName\"\n}\n```\n\n**Using `terraform import` to import** CloudWatch Evidently Launch using the `name` of the launch and `name` of the project or `arn` of the hosting CloudWatch Evidently Project separated by a `:`. For example:\n\nImport using the `name` of the launch and `name` of the project separated by a `:`:\n\n```console\n% terraform import aws_evidently_launch.example exampleLaunchName:exampleProjectName\n```\n\nImport using the `name` of the launch and `arn` of the project separated by a `:`:\n\n```console\n% terraform import aws_evidently_launch.example exampleLaunchName:arn:aws:evidently:us-east-1:123456789012:project/exampleProjectName\n```\n",
      "language": "hcl",
      "path": "website/docs/r/evidently_launch.html.markdown",
      "slug": "evidently_launch",
      "subcategory": "CloudWatch Evidently",
      "title": "evidently_launch",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198392"
    }
  }
}