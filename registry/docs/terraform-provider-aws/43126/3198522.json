{
  "data": {
    "type": "provider-docs",
    "id": "3198522",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"IoT Core\"\nlayout: \"aws\"\npage_title: \"AWS: aws_iot_topic_rule\"\ndescription: |-\n    Creates and manages an AWS IoT topic rule\n---\n\n# Resource: aws_iot_topic_rule\n\n## Example Usage\n\n```terraform\nresource \"aws_iot_topic_rule\" \"rule\" {\n  name        = \"MyRule\"\n  description = \"Example rule\"\n  enabled     = true\n  sql         = \"SELECT * FROM 'topic/test'\"\n  sql_version = \"2016-03-23\"\n\n  sns {\n    message_format = \"RAW\"\n    role_arn       = aws_iam_role.role.arn\n    target_arn     = aws_sns_topic.mytopic.arn\n  }\n\n  error_action {\n    sns {\n      message_format = \"RAW\"\n      role_arn       = aws_iam_role.role.arn\n      target_arn     = aws_sns_topic.myerrortopic.arn\n    }\n  }\n}\n\nresource \"aws_sns_topic\" \"mytopic\" {\n  name = \"mytopic\"\n}\n\nresource \"aws_sns_topic\" \"myerrortopic\" {\n  name = \"myerrortopic\"\n}\n\ndata \"aws_iam_policy_document\" \"assume_role\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"iot.amazonaws.com\"]\n    }\n\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\nresource \"aws_iam_role\" \"role\" {\n  name               = \"myrole\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\n}\n\ndata \"aws_iam_policy_document\" \"iam_policy_for_lambda\" {\n  statement {\n    effect    = \"Allow\"\n    actions   = [\"sns:Publish\"]\n    resources = [aws_sns_topic.mytopic.arn]\n  }\n}\n\nresource \"aws_iam_role_policy\" \"iam_policy_for_lambda\" {\n  name   = \"mypolicy\"\n  role   = aws_iam_role.role.id\n  policy = data.aws_iam_policy_document.iam_policy_for_lambda.json\n}\n```\n\n## Argument Reference\n\n* `name` - (Required) The name of the rule.\n* `description` - (Optional) The description of the rule.\n* `enabled` - (Required) Specifies whether the rule is enabled.\n* `sql` - (Required) The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.\n* `sql_version` - (Required) The version of the SQL rules engine to use when evaluating the rule.\n* `error_action` - (Optional) Configuration block with error action to be associated with the rule. See the documentation for `cloudwatch_alarm`, `cloudwatch_logs`, `cloudwatch_metric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iot_analytics`, `iot_events`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `step_functions`, `timestream` configuration blocks for further configuration details.\n* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n\nThe `cloudwatch_alarm` object takes the following arguments:\n\n* `alarm_name` - (Required) The CloudWatch alarm name.\n* `role_arn` - (Required) The IAM role ARN that allows access to the CloudWatch alarm.\n* `state_reason` - (Required) The reason for the alarm change.\n* `state_value` - (Required) The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.\n\nThe `cloudwatch_logs` object takes the following arguments:\n\n* `log_group_name` - (Required) The CloudWatch log group name.\n* `role_arn` - (Required) The IAM role ARN that allows access to the CloudWatch alarm.\n\nThe `cloudwatch_metric` object takes the following arguments:\n\n* `metric_name` - (Required) The CloudWatch metric name.\n* `metric_namespace` - (Required) The CloudWatch metric namespace name.\n* `metric_timestamp` - (Optional) An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).\n* `metric_unit` - (Required) The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)\n* `metric_value` - (Required) The CloudWatch metric value.\n* `role_arn` - (Required) The IAM role ARN that allows access to the CloudWatch metric.\n\nThe `dynamodb` object takes the following arguments:\n\n* `hash_key_field` - (Required) The hash key name.\n* `hash_key_type` - (Optional) The hash key type. Valid values are \"STRING\" or \"NUMBER\".\n* `hash_key_value` - (Required) The hash key value.\n* `payload_field` - (Optional) The action payload.\n* `range_key_field` - (Optional) The range key name.\n* `range_key_type` - (Optional) The range key type. Valid values are \"STRING\" or \"NUMBER\".\n* `range_key_value` - (Optional) The range key value.\n* `operation` - (Optional) The operation. Valid values are \"INSERT\", \"UPDATE\", or \"DELETE\".\n* `role_arn` - (Required) The ARN of the IAM role that grants access to the DynamoDB table.\n* `table_name` - (Required) The name of the DynamoDB table.\n\nThe `dynamodbv2` object takes the following arguments:\n\n* `put_item` - (Required) Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.\n    * `table_name` - (Required) The name of the DynamoDB table.\n* `role_arn` - (Required) The ARN of the IAM role that grants access to the DynamoDB table.\n\nThe `elasticsearch` object takes the following arguments:\n\n* `endpoint` - (Required) The endpoint of your Elasticsearch domain.\n* `id` - (Required) The unique identifier for the document you are storing.\n* `index` - (Required) The Elasticsearch index where you want to store your data.\n* `role_arn` - (Required) The IAM role ARN that has access to Elasticsearch.\n* `type` - (Required) The type of document you are storing.\n\nThe `firehose` object takes the following arguments:\n\n* `delivery_stream_name` - (Required) The delivery stream name.\n* `role_arn` - (Required) The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.\n* `separator` - (Optional) A character separator that is used to separate records written to the Firehose stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).\n* `batch_mode` - (Optional) The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.\n\nThe `http` object takes the following arguments:\n\n* `url` - (Required) The HTTPS URL.\n* `confirmation_url` - (Optional) The HTTPS URL used to verify ownership of `url`.\n* `http_header` - (Optional) Custom HTTP header IoT Core should send. It is possible to define more than one custom header.\n\nThe `http_header` object takes the following arguments:\n\n* `key` - (Required) The name of the HTTP header.\n* `value` - (Required) The value of the HTTP header.\n\nThe `iot_analytics` object takes the following arguments:\n\n* `channel_name` - (Required) Name of AWS IOT Analytics channel.\n* `role_arn` - (Required) The ARN of the IAM role that grants access.\n* `batch_mode` - (Optional) The payload that contains a JSON array of records will be sent to IoT Analytics via a batch call.\n\nThe `iot_events` object takes the following arguments:\n\n* `input_name` - (Required) The name of the AWS IoT Events input.\n* `role_arn` - (Required) The ARN of the IAM role that grants access.\n* `message_id` - (Optional) Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.\n* `batch_mode` - (Optional) The payload that contains a JSON array of records will be sent to IoT Events via a batch call.\n\nThe `kafka` object takes the following arguments:\n\n* `client_properties` - (Required) Properties of the Apache Kafka producer client. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/apache-kafka-rule-action.html).\n* `destination_arn` - (Required) The ARN of Kafka action's VPC [`aws_iot_topic_rule_destination`](iot_topic_rule_destination.html) .\n* `key` - (Optional) The Kafka message key.\n* `partition` - (Optional) The Kafka message partition.\n* `topic` - (Optional) The Kafka topic for messages to be sent to the Kafka broker.\n\nThe `kinesis` object takes the following arguments:\n\n* `partition_key` - (Optional) The partition key.\n* `role_arn` - (Required) The ARN of the IAM role that grants access to the Amazon Kinesis stream.\n* `stream_name` - (Required) The name of the Amazon Kinesis stream.\n\nThe `lambda` object takes the following arguments:\n\n* `function_arn` - (Required) The ARN of the Lambda function.\n\nThe `republish` object takes the following arguments:\n\n* `role_arn` - (Required) The ARN of the IAM role that grants access.\n* `topic` - (Required) The name of the MQTT topic the message should be republished to.\n* `qos` - (Optional) The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.\n\nThe `s3` object takes the following arguments:\n\n* `bucket_name` - (Required) The Amazon S3 bucket name.\n* `canned_acl` - (Optional) The Amazon S3 canned ACL that controls access to the object identified by the object key. [Valid values](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).\n* `key` - (Required) The object key.\n* `role_arn` - (Required) The ARN of the IAM role that grants access.\n\nThe `sns` object takes the following arguments:\n\n* `message_format` - (Required) The message format of the message to publish. Accepted values are \"JSON\" and \"RAW\".\n* `role_arn` - (Required) The ARN of the IAM role that grants access.\n* `target_arn` - (Required) The ARN of the SNS topic.\n\nThe `sqs` object takes the following arguments:\n\n* `queue_url` - (Required) The URL of the Amazon SQS queue.\n* `role_arn` - (Required) The ARN of the IAM role that grants access.\n* `use_base64` - (Required) Specifies whether to use Base64 encoding.\n\nThe `step_functions` object takes the following arguments:\n\n* `execution_name_prefix` - (Optional) The prefix used to generate, along with a UUID, the unique state machine execution name.\n* `state_machine_name` - (Required) The name of the Step Functions state machine whose execution will be started.\n* `role_arn` - (Required) The ARN of the IAM role that grants access to start execution of the state machine.\n\nThe `timestream` object takes the following arguments:\n\n* `database_name` - (Required) The name of an Amazon Timestream database.\n* `dimension` - (Required) Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.\n    * `name` - (Required) The metadata dimension name. This is the name of the column in the Amazon Timestream database table record.\n    * `value` - (Required) The value to write in this column of the database record.\n* `role_arn` - (Required) The ARN of the role that grants permission to write to the Amazon Timestream database table.\n* `table_name` - (Required) The name of the database table into which to write the measure records.\n* `timestamp` - (Optional) Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.\n    * `unit` - (Required) The precision of the timestamp value that results from the expression described in value. Valid values: `SECONDS`, `MILLISECONDS`, `MICROSECONDS`, `NANOSECONDS`.\n    * `value` - (Required) An expression that returns a long epoch time value.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - The name of the topic rule\n* `arn` - The ARN of the topic rule\n* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IoT Topic Rules using the `name`. For example:\n\n```terraform\nimport {\n  to = aws_iot_topic_rule.rule\n  id = \"<name>\"\n}\n```\n\nUsing `terraform import`, import IoT Topic Rules using the `name`. For example:\n\n```console\n% terraform import aws_iot_topic_rule.rule <name>\n```\n",
      "language": "hcl",
      "path": "website/docs/r/iot_topic_rule.html.markdown",
      "slug": "iot_topic_rule",
      "subcategory": "IoT Core",
      "title": "iot_topic_rule",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198522"
    }
  }
}