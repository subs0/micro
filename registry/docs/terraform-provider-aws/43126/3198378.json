{
  "data": {
    "type": "provider-docs",
    "id": "3198378",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"ELB Classic\"\nlayout: \"aws\"\npage_title: \"AWS: aws_elb\"\ndescription: |-\n  Provides an Elastic Load Balancer resource.\n---\n\n# Resource: aws_elb\n\nProvides an Elastic Load Balancer resource, also known as a \"Classic\nLoad Balancer\" after the release of\n[Application/Network Load Balancers](/docs/providers/aws/r/lb.html).\n\n~> **NOTE on ELB Instances and ELB Attachments:** Terraform currently\nprovides both a standalone [ELB Attachment resource](elb_attachment.html)\n(describing an instance attached to an ELB), and an ELB resource with\n`instances` defined in-line. At this time you cannot use an ELB with in-line\ninstances in conjunction with a ELB Attachment resources. Doing so will cause a\nconflict and will overwrite attachments.\n\n## Example Usage\n\n```terraform\n# Create a new load balancer\nresource \"aws_elb\" \"bar\" {\n  name               = \"foobar-terraform-elb\"\n  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n\n  access_logs {\n    bucket        = \"foo\"\n    bucket_prefix = \"bar\"\n    interval      = 60\n  }\n\n  listener {\n    instance_port     = 8000\n    instance_protocol = \"http\"\n    lb_port           = 80\n    lb_protocol       = \"http\"\n  }\n\n  listener {\n    instance_port      = 8000\n    instance_protocol  = \"http\"\n    lb_port            = 443\n    lb_protocol        = \"https\"\n    ssl_certificate_id = \"arn:aws:iam::123456789012:server-certificate/certName\"\n  }\n\n  health_check {\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n    timeout             = 3\n    target              = \"HTTP:8000/\"\n    interval            = 30\n  }\n\n  instances                   = [aws_instance.foo.id]\n  cross_zone_load_balancing   = true\n  idle_timeout                = 400\n  connection_draining         = true\n  connection_draining_timeout = 400\n\n  tags = {\n    Name = \"foobar-terraform-elb\"\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `name` - (Optional) The name of the ELB. By default generated by Terraform.\n* `name_prefix` - (Optional, Forces new resource) Creates a unique name beginning with the specified\n  prefix. Conflicts with `name`.\n* `access_logs` - (Optional) An Access Logs block. Access Logs documented below.\n* `availability_zones` - (Required for an EC2-classic ELB) The AZ's to serve traffic in.\n* `security_groups` - (Optional) A list of security group IDs to assign to the ELB.\n  Only valid if creating an ELB within a VPC\n* `subnets` - (Required for a VPC ELB) A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.\n* `instances` - (Optional) A list of instance ids to place in the ELB pool.\n* `internal` - (Optional) If true, ELB will be an internal ELB.\n* `listener` - (Required) A list of listener blocks. Listeners documented below.\n* `health_check` - (Optional) A health_check block. Health Check documented below.\n* `cross_zone_load_balancing` - (Optional) Enable cross-zone load balancing. Default: `true`\n* `idle_timeout` - (Optional) The time in seconds that the connection is allowed to be idle. Default: `60`\n* `connection_draining` - (Optional) Boolean to enable connection draining. Default: `false`\n* `connection_draining_timeout` - (Optional) The time in seconds to allow for connections to drain. Default: `300`\n* `desync_mitigation_mode` - (Optional) Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.\n* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n\nExactly one of `availability_zones` or `subnets` must be specified: this\ndetermines if the ELB exists in a VPC or in EC2-classic.\n\nAccess Logs (`access_logs`) support the following:\n\n* `bucket` - (Required) The S3 bucket name to store the logs in.\n* `bucket_prefix` - (Optional) The S3 bucket prefix. Logs are stored in the root if not configured.\n* `interval` - (Optional) The publishing interval in minutes. Valid values: `5` and `60`. Default: `60`\n* `enabled` - (Optional) Boolean to enable / disable `access_logs`. Default is `true`\n\nListeners (`listener`) support the following:\n\n* `instance_port` - (Required) The port on the instance to route to\n* `instance_protocol` - (Required) The protocol to use to the instance. Valid\n  values are `HTTP`, `HTTPS`, `TCP`, or `SSL`\n* `lb_port` - (Required) The port to listen on for the load balancer\n* `lb_protocol` - (Required) The protocol to listen on. Valid values are `HTTP`,\n  `HTTPS`, `TCP`, or `SSL`\n* `ssl_certificate_id` - (Optional) The ARN of an SSL certificate you have\nuploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**\n\nHealth Check (`health_check`) supports the following:\n\n* `healthy_threshold` - (Required) The number of checks before the instance is declared healthy.\n* `unhealthy_threshold` - (Required) The number of checks before the instance is declared unhealthy.\n* `target` - (Required) The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL\n  values are:\n    * `HTTP`, `HTTPS` - PORT and PATH are required\n    * `TCP`, `SSL` - PORT is required, PATH is not supported\n* `interval` - (Required) The interval between checks.\n* `timeout` - (Required) The length of time before the check times out.\n\n## Note on ECDSA Key Algorithm\n\nIf the ARN of the `ssl_certificate_id` that is pointed to references a\ncertificate that was signed by an ECDSA key, note that ELB only supports the\nP256 and P384 curves.  Using a certificate signed by a key using a different\ncurve could produce the error `ERR_SSL_VERSION_OR_CIPHER_MISMATCH` in your\nbrowser.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - The name of the ELB\n* `arn` - The ARN of the ELB\n* `name` - The name of the ELB\n* `dns_name` - The DNS name of the ELB\n* `instances` - The list of instances in the ELB\n* `source_security_group` - The name of the security group that you can use as\n  part of your inbound rules for your load balancer's back-end application\n  instances. Use this for Classic or Default VPC only.\n* `source_security_group_id` - The ID of the security group that you can use as\n  part of your inbound rules for your load balancer's back-end application\n  instances. Only available on ELBs launched in a VPC.\n* `zone_id` - The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)\n* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ELBs using the `name`. For example:\n\n```terraform\nimport {\n  to = aws_elb.bar\n  id = \"elb-production-12345\"\n}\n```\n\nUsing `terraform import`, import ELBs using the `name`. For example:\n\n```console\n% terraform import aws_elb.bar elb-production-12345\n```\n",
      "language": "hcl",
      "path": "website/docs/r/elb.html.markdown",
      "slug": "elb",
      "subcategory": "ELB Classic",
      "title": "elb",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198378"
    }
  }
}