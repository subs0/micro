{
  "data": {
    "type": "provider-docs",
    "id": "3198870",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"S3 (Simple Storage)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_s3_bucket_notification\"\ndescription: |-\n  Manages a S3 Bucket Notification Configuration\n---\n\n# Resource: aws_s3_bucket_notification\n\nManages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).\n\n~> **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `aws_s3_bucket_notification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example \"Trigger multiple Lambda functions\" for an option.\n\n## Example Usage\n\n### Add notification configuration to SNS Topic\n\n```terraform\ndata \"aws_iam_policy_document\" \"topic\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"s3.amazonaws.com\"]\n    }\n\n    actions   = [\"SNS:Publish\"]\n    resources = [\"arn:aws:sns:*:*:s3-event-notification-topic\"]\n\n    condition {\n      test     = \"ArnLike\"\n      variable = \"aws:SourceArn\"\n      values   = [aws_s3_bucket.bucket.arn]\n    }\n  }\n}\nresource \"aws_sns_topic\" \"topic\" {\n  name   = \"s3-event-notification-topic\"\n  policy = data.aws_iam_policy_document.topic.json\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"your-bucket-name\"\n}\n\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\n  bucket = aws_s3_bucket.bucket.id\n\n  topic {\n    topic_arn     = aws_sns_topic.topic.arn\n    events        = [\"s3:ObjectCreated:*\"]\n    filter_suffix = \".log\"\n  }\n}\n```\n\n### Add notification configuration to SQS Queue\n\n```terraform\ndata \"aws_iam_policy_document\" \"queue\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"*\"\n      identifiers = [\"*\"]\n    }\n\n    actions   = [\"sqs:SendMessage\"]\n    resources = [\"arn:aws:sqs:*:*:s3-event-notification-queue\"]\n\n    condition {\n      test     = \"ArnEquals\"\n      variable = \"aws:SourceArn\"\n      values   = [aws_s3_bucket.bucket.arn]\n    }\n  }\n}\n\nresource \"aws_sqs_queue\" \"queue\" {\n  name   = \"s3-event-notification-queue\"\n  policy = data.aws_iam_policy_document.queue.json\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"your-bucket-name\"\n}\n\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\n  bucket = aws_s3_bucket.bucket.id\n\n  queue {\n    queue_arn     = aws_sqs_queue.queue.arn\n    events        = [\"s3:ObjectCreated:*\"]\n    filter_suffix = \".log\"\n  }\n}\n```\n\n### Add notification configuration to Lambda Function\n\n```terraform\ndata \"aws_iam_policy_document\" \"assume_role\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"lambda.amazonaws.com\"]\n    }\n\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\nresource \"aws_iam_role\" \"iam_for_lambda\" {\n  name               = \"iam_for_lambda\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\n}\n\nresource \"aws_lambda_permission\" \"allow_bucket\" {\n  statement_id  = \"AllowExecutionFromS3Bucket\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.func.arn\n  principal     = \"s3.amazonaws.com\"\n  source_arn    = aws_s3_bucket.bucket.arn\n}\n\nresource \"aws_lambda_function\" \"func\" {\n  filename      = \"your-function.zip\"\n  function_name = \"example_lambda_name\"\n  role          = aws_iam_role.iam_for_lambda.arn\n  handler       = \"exports.example\"\n  runtime       = \"go1.x\"\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"your-bucket-name\"\n}\n\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\n  bucket = aws_s3_bucket.bucket.id\n\n  lambda_function {\n    lambda_function_arn = aws_lambda_function.func.arn\n    events              = [\"s3:ObjectCreated:*\"]\n    filter_prefix       = \"AWSLogs/\"\n    filter_suffix       = \".log\"\n  }\n\n  depends_on = [aws_lambda_permission.allow_bucket]\n}\n```\n\n### Trigger multiple Lambda functions\n\n```terraform\ndata \"aws_iam_policy_document\" \"assume_role\" {\n  effect = \"Allow\"\n\n  principals {\n    type        = \"Service\"\n    identifiers = [\"lambda.amazonaws.com\"]\n  }\n\n  actions = [\"sts:AssumeRole\"]\n}\n\nresource \"aws_iam_role\" \"iam_for_lambda\" {\n  name               = \"iam_for_lambda\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\n}\n\nresource \"aws_lambda_permission\" \"allow_bucket1\" {\n  statement_id  = \"AllowExecutionFromS3Bucket1\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.func1.arn\n  principal     = \"s3.amazonaws.com\"\n  source_arn    = aws_s3_bucket.bucket.arn\n}\n\nresource \"aws_lambda_function\" \"func1\" {\n  filename      = \"your-function1.zip\"\n  function_name = \"example_lambda_name1\"\n  role          = aws_iam_role.iam_for_lambda.arn\n  handler       = \"exports.example\"\n  runtime       = \"go1.x\"\n}\n\nresource \"aws_lambda_permission\" \"allow_bucket2\" {\n  statement_id  = \"AllowExecutionFromS3Bucket2\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.func2.arn\n  principal     = \"s3.amazonaws.com\"\n  source_arn    = aws_s3_bucket.bucket.arn\n}\n\nresource \"aws_lambda_function\" \"func2\" {\n  filename      = \"your-function2.zip\"\n  function_name = \"example_lambda_name2\"\n  role          = aws_iam_role.iam_for_lambda.arn\n  handler       = \"exports.example\"\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"your-bucket-name\"\n}\n\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\n  bucket = aws_s3_bucket.bucket.id\n\n  lambda_function {\n    lambda_function_arn = aws_lambda_function.func1.arn\n    events              = [\"s3:ObjectCreated:*\"]\n    filter_prefix       = \"AWSLogs/\"\n    filter_suffix       = \".log\"\n  }\n\n  lambda_function {\n    lambda_function_arn = aws_lambda_function.func2.arn\n    events              = [\"s3:ObjectCreated:*\"]\n    filter_prefix       = \"OtherLogs/\"\n    filter_suffix       = \".log\"\n  }\n\n  depends_on = [\n    aws_lambda_permission.allow_bucket1,\n    aws_lambda_permission.allow_bucket2,\n  ]\n}\n```\n\n### Add multiple notification configurations to SQS Queue\n\n```terraform\ndata \"aws_iam_policy_document\" \"queue\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"*\"\n      identifiers = [\"*\"]\n    }\n\n    actions   = [\"sqs:SendMessage\"]\n    resources = [\"arn:aws:sqs:*:*:s3-event-notification-queue\"]\n\n    condition {\n      test     = \"ArnEquals\"\n      variable = \"aws:SourceArn\"\n      values   = [aws_s3_bucket.bucket.arn]\n    }\n  }\n}\n\nresource \"aws_sqs_queue\" \"queue\" {\n  name   = \"s3-event-notification-queue\"\n  policy = data.aws_iam_policy_document.queue.json\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"your-bucket-name\"\n}\n\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\n  bucket = aws_s3_bucket.bucket.id\n\n  queue {\n    id            = \"image-upload-event\"\n    queue_arn     = aws_sqs_queue.queue.arn\n    events        = [\"s3:ObjectCreated:*\"]\n    filter_prefix = \"images/\"\n  }\n\n  queue {\n    id            = \"video-upload-event\"\n    queue_arn     = aws_sqs_queue.queue.arn\n    events        = [\"s3:ObjectCreated:*\"]\n    filter_prefix = \"videos/\"\n  }\n}\n```\n\nFor Terraform's [JSON syntax](https://www.terraform.io/docs/configuration/syntax.html), use an array instead of defining the `queue` key twice.\n\n```json\n{\n\t\"bucket\": \"${aws_s3_bucket.bucket.id}\",\n\t\"queue\": [\n\t\t{\n\t\t\t\"id\": \"image-upload-event\",\n\t\t\t\"queue_arn\": \"${aws_sqs_queue.queue.arn}\",\n\t\t\t\"events\": [\"s3:ObjectCreated:*\"],\n\t\t\t\"filter_prefix\": \"images/\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"video-upload-event\",\n\t\t\t\"queue_arn\": \"${aws_sqs_queue.queue.arn}\",\n\t\t\t\"events\": [\"s3:ObjectCreated:*\"],\n\t\t\t\"filter_prefix\": \"videos/\"\n\t\t}\n\t]\n}\n```\n\n### Emit events to EventBridge\n\n```terraform\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"your-bucket-name\"\n}\n\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\n  bucket      = aws_s3_bucket.bucket.id\n  eventbridge = true\n}\n```\n\n## Argument Reference\n\nThe following arguments are required:\n\n* `bucket` - (Required) Name of the bucket for notification configuration.\n\nThe following arguments are optional:\n\n* `eventbridge` - (Optional) Whether to enable Amazon EventBridge notifications. Defaults to `false`.\n* `lambda_function` - (Optional, Multiple) Used to configure notifications to a Lambda Function. See below.\n* `queue` - (Optional) Notification configuration to SQS Queue. See below.\n* `topic` - (Optional) Notification configuration to SNS Topic. See below.\n\n### `lambda_function`\n\n* `events` - (Required) [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.\n* `filter_prefix` - (Optional) Object key name prefix.\n* `filter_suffix` - (Optional) Object key name suffix.\n* `id` - (Optional) Unique identifier for each of the notification configurations.\n* `lambda_function_arn` - (Required) Lambda function ARN.\n\n### `queue`\n\n* `events` - (Required) Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.\n* `filter_prefix` - (Optional) Object key name prefix.\n* `filter_suffix` - (Optional) Object key name suffix.\n* `id` - (Optional) Unique identifier for each of the notification configurations.\n* `queue_arn` - (Required) SQS queue ARN.\n\n### `topic`\n\n* `events` - (Required) [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.\n* `filter_prefix` - (Optional) Object key name prefix.\n* `filter_suffix` - (Optional) Object key name suffix.\n* `id` - (Optional) Unique identifier for each of the notification configurations.\n* `topic_arn` - (Required) SNS topic ARN.\n\n## Attribute Reference\n\nThis resource exports no additional attributes.\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 bucket notification using the `bucket`. For example:\n\n```terraform\nimport {\n  to = aws_s3_bucket_notification.bucket_notification\n  id = \"bucket-name\"\n}\n```\n\nUsing `terraform import`, import S3 bucket notification using the `bucket`. For example:\n\n```console\n% terraform import aws_s3_bucket_notification.bucket_notification bucket-name\n```\n",
      "language": "hcl",
      "path": "website/docs/r/s3_bucket_notification.html.markdown",
      "slug": "s3_bucket_notification",
      "subcategory": "S3 (Simple Storage)",
      "title": "s3_bucket_notification",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198870"
    }
  }
}