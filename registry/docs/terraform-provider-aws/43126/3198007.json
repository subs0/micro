{
  "data": {
    "type": "provider-docs",
    "id": "3198007",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"Athena\"\nlayout: \"aws\"\npage_title: \"AWS: aws_athena_database\"\ndescription: |-\n  Provides an Athena database.\n---\n\n# Resource: aws_athena_database\n\nProvides an Athena database.\n\n## Example Usage\n\n```terraform\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"example\"\n}\n\nresource \"aws_athena_database\" \"example\" {\n  name   = \"database_name\"\n  bucket = aws_s3_bucket.example.id\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `bucket` - (Required) Name of S3 bucket to save the results of the query execution.\n* `name` - (Required) Name of the database to create.\n* `acl_configuration` - (Optional) That an Amazon S3 canned ACL should be set to control ownership of stored query results. See [ACL Configuration](#acl-configuration) below.\n* `comment` - (Optional) Description of the database.\n* `encryption_configuration` - (Optional) Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See [Encryption Configuration](#encryption-configuration) below.\n* `expected_bucket_owner` - (Optional) AWS account ID that you expect to be the owner of the Amazon S3 bucket.\n* `force_destroy` - (Optional, Default: false) Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.\n* `properties` - (Optional) Key-value map of custom metadata properties for the database definition.\n\n### ACL Configuration\n\n* `s3_acl_option` - (Required) Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.\n\n~> **NOTE:** When Athena queries are executed, result files may be created in the specified bucket. Consider using `force_destroy` on the bucket too in order to avoid any problems when destroying the bucket.  \n\n### Encryption Configuration\n\n* `encryption_option` - (Required) Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`\n* `kms_key` - (Optional) KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - Database name\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Athena Databases using their name. For example:\n\n```terraform\nimport {\n  to = aws_athena_database.example\n  id = \"example\"\n}\n```\n\nUsing `terraform import`, import Athena Databases using their name. For example:\n\n```console\n% terraform import aws_athena_database.example example\n```\n\nCertain resource arguments, like `encryption_configuration` and `bucket`, do not have an API method for reading the information after creation. If the argument is set in the Terraform configuration on an imported resource, Terraform will always show a difference. To workaround this behavior, either omit the argument from the Terraform configuration or use [`ignore_changes`](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html#ignore_changes) to hide the difference. For example:\n\n```terraform\nresource \"aws_athena_database\" \"example\" {\n  name   = \"database_name\"\n  bucket = aws_s3_bucket.example.id\n\n  # There is no API for reading bucket\n  lifecycle {\n    ignore_changes = [bucket]\n  }\n}\n```\n",
      "language": "hcl",
      "path": "website/docs/r/athena_database.html.markdown",
      "slug": "athena_database",
      "subcategory": "Athena",
      "title": "athena_database",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198007"
    }
  }
}