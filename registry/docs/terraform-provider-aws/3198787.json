{
  "data": {
    "type": "provider-docs",
    "id": "3198787",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"RDS (Relational Database)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_rds_global_cluster\"\ndescription: |-\n  Manages an RDS Global Cluster\n---\n\n# Resource: aws_rds_global_cluster\n\nManages an RDS Global Cluster, which is an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem.\n\nMore information about Aurora global databases can be found in the [Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database-creating).\n\n## Example Usage\n\n### New MySQL Global Cluster\n\n```terraform\nresource \"aws_rds_global_cluster\" \"example\" {\n  global_cluster_identifier = \"global-test\"\n  engine                    = \"aurora\"\n  engine_version            = \"5.6.mysql_aurora.1.22.2\"\n  database_name             = \"example_db\"\n}\n\nresource \"aws_rds_cluster\" \"primary\" {\n  provider                  = aws.primary\n  engine                    = aws_rds_global_cluster.example.engine\n  engine_version            = aws_rds_global_cluster.example.engine_version\n  cluster_identifier        = \"test-primary-cluster\"\n  master_username           = \"username\"\n  master_password           = \"somepass123\"\n  database_name             = \"example_db\"\n  global_cluster_identifier = aws_rds_global_cluster.example.id\n  db_subnet_group_name      = \"default\"\n}\n\nresource \"aws_rds_cluster_instance\" \"primary\" {\n  provider             = aws.primary\n  engine               = aws_rds_global_cluster.example.engine\n  engine_version       = aws_rds_global_cluster.example.engine_version\n  identifier           = \"test-primary-cluster-instance\"\n  cluster_identifier   = aws_rds_cluster.primary.id\n  instance_class       = \"db.r4.large\"\n  db_subnet_group_name = \"default\"\n}\n\nresource \"aws_rds_cluster\" \"secondary\" {\n  provider                  = aws.secondary\n  engine                    = aws_rds_global_cluster.example.engine\n  engine_version            = aws_rds_global_cluster.example.engine_version\n  cluster_identifier        = \"test-secondary-cluster\"\n  global_cluster_identifier = aws_rds_global_cluster.example.id\n  db_subnet_group_name      = \"default\"\n\n  depends_on = [\n    aws_rds_cluster_instance.primary\n  ]\n}\n\nresource \"aws_rds_cluster_instance\" \"secondary\" {\n  provider             = aws.secondary\n  engine               = aws_rds_global_cluster.example.engine\n  engine_version       = aws_rds_global_cluster.example.engine_version\n  identifier           = \"test-secondary-cluster-instance\"\n  cluster_identifier   = aws_rds_cluster.secondary.id\n  instance_class       = \"db.r4.large\"\n  db_subnet_group_name = \"default\"\n}\n```\n\n### New PostgreSQL Global Cluster\n\n```terraform\nprovider \"aws\" {\n  alias  = \"primary\"\n  region = \"us-east-2\"\n}\n\nprovider \"aws\" {\n  alias  = \"secondary\"\n  region = \"us-east-1\"\n}\n\nresource \"aws_rds_global_cluster\" \"example\" {\n  global_cluster_identifier = \"global-test\"\n  engine                    = \"aurora-postgresql\"\n  engine_version            = \"11.9\"\n  database_name             = \"example_db\"\n}\n\nresource \"aws_rds_cluster\" \"primary\" {\n  provider                  = aws.primary\n  engine                    = aws_rds_global_cluster.example.engine\n  engine_version            = aws_rds_global_cluster.example.engine_version\n  cluster_identifier        = \"test-primary-cluster\"\n  master_username           = \"username\"\n  master_password           = \"somepass123\"\n  database_name             = \"example_db\"\n  global_cluster_identifier = aws_rds_global_cluster.example.id\n  db_subnet_group_name      = \"default\"\n}\n\nresource \"aws_rds_cluster_instance\" \"primary\" {\n  provider             = aws.primary\n  engine               = aws_rds_global_cluster.example.engine\n  engine_version       = aws_rds_global_cluster.example.engine_version\n  identifier           = \"test-primary-cluster-instance\"\n  cluster_identifier   = aws_rds_cluster.primary.id\n  instance_class       = \"db.r4.large\"\n  db_subnet_group_name = \"default\"\n}\n\nresource \"aws_rds_cluster\" \"secondary\" {\n  provider                  = aws.secondary\n  engine                    = aws_rds_global_cluster.example.engine\n  engine_version            = aws_rds_global_cluster.example.engine_version\n  cluster_identifier        = \"test-secondary-cluster\"\n  global_cluster_identifier = aws_rds_global_cluster.example.id\n  skip_final_snapshot       = true\n  db_subnet_group_name      = \"default\"\n\n  depends_on = [\n    aws_rds_cluster_instance.primary\n  ]\n}\n\nresource \"aws_rds_cluster_instance\" \"secondary\" {\n  provider             = aws.secondary\n  engine               = aws_rds_global_cluster.example.engine\n  engine_version       = aws_rds_global_cluster.example.engine_version\n  identifier           = \"test-secondary-cluster-instance\"\n  cluster_identifier   = aws_rds_cluster.secondary.id\n  instance_class       = \"db.r4.large\"\n  db_subnet_group_name = \"default\"\n}\n```\n\n### New Global Cluster From Existing DB Cluster\n\n```terraform\nresource \"aws_rds_cluster\" \"example\" {\n  # ... other configuration ...\n\n  # NOTE: Using this DB Cluster to create a Global Cluster, the\n  # global_cluster_identifier attribute will become populated and\n  # Terraform will begin showing it as a difference. Do not configure:\n  # global_cluster_identifier = aws_rds_global_cluster.example.id\n  # as it creates a circular reference. Use ignore_changes instead.\n  lifecycle {\n    ignore_changes = [global_cluster_identifier]\n  }\n}\n\nresource \"aws_rds_global_cluster\" \"example\" {\n  force_destroy                = true\n  global_cluster_identifier    = \"example\"\n  source_db_cluster_identifier = aws_rds_cluster.example.arn\n}\n```\n\n### Upgrading Engine Versions\n\nWhen you upgrade the version of an `aws_rds_global_cluster`, Terraform will attempt to in-place upgrade the engine versions of all associated clusters. Since the `aws_rds_cluster` resource is being updated through the `aws_rds_global_cluster`, you are likely to get an error (`Provider produced inconsistent final plan`). To avoid this, use the `lifecycle` `ignore_changes` meta argument as shown below on the `aws_rds_cluster`.\n\n```terraform\nresource \"aws_rds_global_cluster\" \"example\" {\n  global_cluster_identifier = \"kyivkharkiv\"\n  engine                    = \"aurora-mysql\"\n  engine_version            = \"5.7.mysql_aurora.2.07.5\"\n}\n\nresource \"aws_rds_cluster\" \"primary\" {\n  allow_major_version_upgrade = true\n  apply_immediately           = true\n  cluster_identifier          = \"odessadnipro\"\n  database_name               = \"totoro\"\n  engine                      = aws_rds_global_cluster.example.engine\n  engine_version              = aws_rds_global_cluster.example.engine_version\n  global_cluster_identifier   = aws_rds_global_cluster.example.id\n  master_password             = \"satsukimae\"\n  master_username             = \"maesatsuki\"\n  skip_final_snapshot         = true\n\n  lifecycle {\n    ignore_changes = [engine_version]\n  }\n}\n\nresource \"aws_rds_cluster_instance\" \"primary\" {\n  apply_immediately  = true\n  cluster_identifier = aws_rds_cluster.primary.id\n  engine             = aws_rds_cluster.primary.engine\n  engine_version     = aws_rds_cluster.primary.engine_version\n  identifier         = \"donetsklviv\"\n  instance_class     = \"db.r4.large\"\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `global_cluster_identifier` - (Required, Forces new resources) Global cluster identifier.\n* `database_name` - (Optional, Forces new resources) Name for an automatically created database on cluster creation.\n* `deletion_protection` - (Optional) If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.\n* `engine` - (Optional, Forces new resources) Name of the database engine to be used for this DB cluster. Terraform will only perform drift detection if a configuration value is provided. Valid values: `aurora`, `aurora-mysql`, `aurora-postgresql`. Defaults to `aurora`. Conflicts with `source_db_cluster_identifier`.\n* `engine_version` - (Optional) Engine version of the Aurora global database. The `engine`, `engine_version`, and `instance_class` (on the `aws_rds_cluster_instance`) must together support global databases. See [Using Amazon Aurora global databases](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html) for more information. By upgrading the engine version, Terraform will upgrade cluster members. **NOTE:** To avoid an `inconsistent final plan` error while upgrading, use the `lifecycle` `ignore_changes` for `engine_version` meta argument on the associated `aws_rds_cluster` resource as shown above in [Upgrading Engine Versions](#upgrading-engine-versions) example.\n* `force_destroy` - (Optional) Enable to remove DB Cluster members from Global Cluster on destroy. Required with `source_db_cluster_identifier`.\n* `source_db_cluster_identifier` - (Optional) Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. Terraform cannot perform drift detection of this value.\n* `storage_encrypted` - (Optional, Forces new resources) Specifies whether the DB cluster is encrypted. The default is `false` unless `source_db_cluster_identifier` is specified and encrypted. Terraform will only perform drift detection if a configuration value is provided.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - RDS Global Cluster Amazon Resource Name (ARN)\n* `global_cluster_members` - Set of objects containing Global Cluster members.\n    * `db_cluster_arn` - Amazon Resource Name (ARN) of member DB Cluster\n    * `is_writer` - Whether the member is the primary DB Cluster\n* `global_cluster_resource_id` - AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed\n* `id` - RDS Global Cluster identifier\n\n## Timeouts\n\n[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):\n\n- `create` - (Default `30m`)\n- `update` - (Default `90m`)\n- `delete` - (Default `30m`)\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_rds_global_cluster` using the RDS Global Cluster identifier. For example:\n\n```terraform\nimport {\n  to = aws_rds_global_cluster.example\n  id = \"example\"\n}\n```\n\nUsing `terraform import`, import `aws_rds_global_cluster` using the RDS Global Cluster identifier. For example:\n\n```console\n% terraform import aws_rds_global_cluster.example example\n```\n\nCertain resource arguments, like `force_destroy`, only exist within Terraform. If the argument is set in the Terraform configuration on an imported resource, Terraform will show a difference on the first plan after import to update the state value. This change is safe to apply immediately so the state matches the desired configuration.\n\nCertain resource arguments, like `source_db_cluster_identifier`, do not have an API method for reading the information after creation. If the argument is set in the Terraform configuration on an imported resource, Terraform will always show a difference. To workaround this behavior, either omit the argument from the Terraform configuration or use [`ignore_changes`](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html#ignore_changes) to hide the difference. For example:\n\n```terraform\nresource \"aws_rds_global_cluster\" \"example\" {\n  # ... other configuration ...\n\n  # There is no API for reading source_db_cluster_identifier\n  lifecycle {\n    ignore_changes = [source_db_cluster_identifier]\n  }\n}\n```\n",
      "language": "hcl",
      "path": "website/docs/r/rds_global_cluster.html.markdown",
      "slug": "rds_global_cluster",
      "subcategory": "RDS (Relational Database)",
      "title": "rds_global_cluster",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198787"
    }
  }
}