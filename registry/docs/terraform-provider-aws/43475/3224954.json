{
  "data": {
    "type": "provider-docs",
    "id": "3224954",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"Batch\"\nlayout: \"aws\"\npage_title: \"AWS: aws_batch_compute_environment\"\ndescription: |-\n  Creates a AWS Batch compute environment.\n---\n\n# Resource: aws_batch_compute_environment\n\nCreates a AWS Batch compute environment. Compute environments contain the Amazon ECS container instances that are used to run containerized batch jobs.\n\nFor information about AWS Batch, see [What is AWS Batch?][1] .\nFor information about compute environment, see [Compute Environments][2] .\n\n~> **Note:** To prevent a race condition during environment deletion, make sure to set `depends_on` to the related `aws_iam_role_policy_attachment`;\notherwise, the policy may be destroyed too soon and the compute environment will then get stuck in the `DELETING` state, see [Troubleshooting AWS Batch][3] .\n\n## Example Usage\n\n### EC2 Type\n\n```terraform\ndata \"aws_iam_policy_document\" \"ec2_assume_role\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"ec2.amazonaws.com\"]\n    }\n\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\nresource \"aws_iam_role\" \"ecs_instance_role\" {\n  name               = \"ecs_instance_role\"\n  assume_role_policy = data.aws_iam_policy_document.ec2_assume_role.json\n}\n\nresource \"aws_iam_role_policy_attachment\" \"ecs_instance_role\" {\n  role       = aws_iam_role.ecs_instance_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role\"\n}\n\nresource \"aws_iam_instance_profile\" \"ecs_instance_role\" {\n  name = \"ecs_instance_role\"\n  role = aws_iam_role.ecs_instance_role.name\n}\n\ndata \"aws_iam_policy_document\" \"batch_assume_role\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"batch.amazonaws.com\"]\n    }\n\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\nresource \"aws_iam_role\" \"aws_batch_service_role\" {\n  name               = \"aws_batch_service_role\"\n  assume_role_policy = data.aws_iam_policy_document.batch_assume_role.json\n}\n\nresource \"aws_iam_role_policy_attachment\" \"aws_batch_service_role\" {\n  role       = aws_iam_role.aws_batch_service_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole\"\n}\n\nresource \"aws_security_group\" \"sample\" {\n  name = \"aws_batch_compute_environment_security_group\"\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\nresource \"aws_vpc\" \"sample\" {\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_subnet\" \"sample\" {\n  vpc_id     = aws_vpc.sample.id\n  cidr_block = \"10.1.1.0/24\"\n}\n\nresource \"aws_placement_group\" \"sample\" {\n  name     = \"sample\"\n  strategy = \"cluster\"\n}\n\nresource \"aws_batch_compute_environment\" \"sample\" {\n  compute_environment_name = \"sample\"\n\n  compute_resources {\n    instance_role = aws_iam_instance_profile.ecs_instance_role.arn\n\n    instance_type = [\n      \"c4.large\",\n    ]\n\n    max_vcpus = 16\n    min_vcpus = 0\n\n    placement_group = aws_placement_group.sample.name\n\n    security_group_ids = [\n      aws_security_group.sample.id,\n    ]\n\n    subnets = [\n      aws_subnet.sample.id,\n    ]\n\n    type = \"EC2\"\n  }\n\n  service_role = aws_iam_role.aws_batch_service_role.arn\n  type         = \"MANAGED\"\n  depends_on   = [aws_iam_role_policy_attachment.aws_batch_service_role]\n}\n```\n\n### Fargate Type\n\n```hcl\nresource \"aws_batch_compute_environment\" \"sample\" {\n  compute_environment_name = \"sample\"\n\n  compute_resources {\n    max_vcpus = 16\n\n    security_group_ids = [\n      aws_security_group.sample.id\n    ]\n\n    subnets = [\n      aws_subnet.sample.id\n    ]\n\n    type = \"FARGATE\"\n  }\n\n  service_role = aws_iam_role.aws_batch_service_role.arn\n  type         = \"MANAGED\"\n  depends_on   = [aws_iam_role_policy_attachment.aws_batch_service_role]\n}\n```\n\n## Argument Reference\n\n* `compute_environment_name` - (Optional, Forces new resource) The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, Terraform will assign a random, unique name.\n* `compute_environment_name_prefix` - (Optional, Forces new resource) Creates a unique compute environment name beginning with the specified prefix. Conflicts with `compute_environment_name`.\n* `compute_resources` - (Optional) Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.\n* `eks_configuration` - (Optional) Details for the Amazon EKS cluster that supports the compute environment. See details below.\n* `service_role` - (Required) The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.\n* `state` - (Optional) The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.\n* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n* `type` - (Required) The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.\n\n### compute_resources\n\n* `allocation_strategy` - (Optional) The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `bid_percentage` - (Optional) Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `desired_vcpus` - (Optional) The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `ec2_configuration` - (Optional) Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.\n* `ec2_key_pair` - (Optional) The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `image_id` - (Optional) The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use [`ec2_configuration`](#ec2_configuration) `image_id_override` instead)\n* `instance_role` - (Optional) The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `instance_type` - (Optional) A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `launch_template` - (Optional) The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `max_vcpus` - (Required) The maximum number of EC2 vCPUs that an environment can reach.\n* `min_vcpus` - (Optional) The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `placement_group` - (Optional) The Amazon EC2 placement group to associate with your compute resources.\n* `security_group_ids` - (Optional) A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.\n* `spot_iam_fleet_role` - (Optional) The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `subnets` - (Required) A list of VPC subnets into which the compute resources are launched.\n* `tags` - (Optional) Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n* `type` - (Required) The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.\n\n### ec2_configuration\n\n`ec2_configuration` supports the following:\n\n* `image_id_override` - (Optional) The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `image_id` argument in the [`compute_resources`](#compute_resources) block.\n* `image_type` - (Optional) The image type to match with the instance type to select an AMI. If the `image_id_override` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (`ECS_AL2`) is used.\n\n### launch_template\n\n`launch_template` supports the following:\n\n* `launch_template_id` - (Optional) ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.\n* `launch_template_name` - (Optional) Name of the launch template.\n* `version` - (Optional) The version number of the launch template. Default: The default version of the launch template.\n\n### eks_configuration\n\n`eks_configuration` supports the following:\n\n* `eks_cluster_arn` - (Required) The Amazon Resource Name (ARN) of the Amazon EKS cluster.\n* `kubernetes_namespace` - (Required) The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - The Amazon Resource Name (ARN) of the compute environment.\n* `ecs_cluster_arn` - The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.\n* `status` - The current status of the compute environment (for example, CREATING or VALID).\n* `status_reason` - A short, human-readable string to provide additional details about the current status of the compute environment.\n* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS Batch compute using the `compute_environment_name`. For example:\n\n```terraform\nimport {\n  to = aws_batch_compute_environment.sample\n  id = \"sample\"\n}\n```\n\nUsing `terraform import`, import AWS Batch compute using the `compute_environment_name`. For example:\n\n```console\n% terraform import aws_batch_compute_environment.sample sample\n```\n\n[1]: http://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html\n[2]: http://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html\n[3]: http://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html\n",
      "language": "hcl",
      "path": "website/docs/r/batch_compute_environment.html.markdown",
      "slug": "batch_compute_environment",
      "subcategory": "Batch",
      "title": "batch_compute_environment",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3224954"
    }
  }
}