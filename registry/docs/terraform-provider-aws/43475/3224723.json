{
  "data": {
    "type": "provider-docs",
    "id": "3224723",
    "attributes": {
      "category": "data-sources",
      "content": "---\nsubcategory: \"S3 (Simple Storage)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_s3_bucket_object\"\ndescription: |-\n    Provides metadata and optionally content of an S3 object\n---\n\n# Data Source: aws_s3_bucket_object\n\n~> **NOTE:** The `aws_s3_bucket_object` data source is DEPRECATED and will be removed in a future version! Use `aws_s3_object` instead, where new features and fixes will be added.\n\nThe S3 object data source allows access to the metadata and\n_optionally_ (see below) content of an object stored inside S3 bucket.\n\n~> **Note:** The content of an object (`body` field) is available only for objects which have a human-readable `Content-Type` (`text/*` and `application/json`). This is to prevent printing unsafe characters and potentially downloading large amount of data which would be thrown away in favour of metadata.\n\n## Example Usage\n\nThe following example retrieves a text object (which must have a `Content-Type`\nvalue starting with `text/`) and uses it as the `user_data` for an EC2 instance:\n\n```terraform\ndata \"aws_s3_bucket_object\" \"bootstrap_script\" {\n  bucket = \"ourcorp-deploy-config\"\n  key    = \"ec2-bootstrap-script.sh\"\n}\n\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-2757f631\"\n  user_data     = data.aws_s3_bucket_object.bootstrap_script.body\n}\n```\n\nThe following, more-complex example retrieves only the metadata for a zip\nfile stored in S3, which is then used to pass the most recent `version_id`\nto AWS Lambda for use as a function implementation. More information about\nLambda functions is available in the documentation for\n[`aws_lambda_function`](/docs/providers/aws/r/lambda_function.html).\n\n```terraform\ndata \"aws_s3_bucket_object\" \"lambda\" {\n  bucket = \"ourcorp-lambda-functions\"\n  key    = \"hello-world.zip\"\n}\n\nresource \"aws_lambda_function\" \"test_lambda\" {\n  s3_bucket         = data.aws_s3_bucket_object.lambda.id\n  s3_key            = data.aws_s3_bucket_object.lambda.key\n  s3_object_version = data.aws_s3_bucket_object.lambda.version_id\n  function_name     = \"lambda_function_name\"\n  role              = aws_iam_role.iam_for_lambda.arn # (not shown)\n  handler           = \"exports.test\"\n}\n```\n\n## Argument Reference\n\nThis data source supports the following arguments:\n\n* `bucket` - (Required) Name of the bucket to read the object from. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified\n* `key` - (Required) Full path to the object inside the bucket\n* `version_id` - (Optional) Specific version ID of the object returned (defaults to latest version)\n\n## Attribute Reference\n\nThis data source exports the following attributes in addition to the arguments above:\n\n* `body` - Object data (see **limitations above** to understand cases in which this field is actually available)\n* `bucket_key_enabled` - (Optional) Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.\n* `cache_control` - Caching behavior along the request/reply chain.\n* `content_disposition` - Presentational information for the object.\n* `content_encoding` - What content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.\n* `content_language` - Language the content is in.\n* `content_length` - Size of the body in bytes.\n* `content_type` - Standard MIME type describing the format of the object data.\n* `etag` - [ETag](https://en.wikipedia.org/wiki/HTTP_ETag) generated for the object (an MD5 sum of the object content in case it's not encrypted)\n* `expiration` - If the object expiration is configured (see [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html)), the field includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.\n* `expires` - Date and time at which the object is no longer cacheable.\n* `last_modified` - Last modified date of the object in RFC1123 format (e.g., `Mon, 02 Jan 2006 15:04:05 MST`)\n* `metadata` - Map of metadata stored with the object in S3. [Keys](https://developer.hashicorp.com/terraform/language/expressions/types#maps-objects) are always returned in lowercase.\n* `object_lock_legal_hold_status` - Indicates whether this object has an active [legal hold](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-legal-holds). This field is only returned if you have permission to view an object's legal hold status.\n* `object_lock_mode` - Object lock [retention mode](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes) currently in place for this object.\n* `object_lock_retain_until_date` - The date and time when this object's object lock will expire.\n* `server_side_encryption` - If the object is stored using server-side encryption (KMS or Amazon S3-managed encryption key), this field includes the chosen encryption and algorithm used.\n* `sse_kms_key_id` - If present, specifies the ID of the Key Management Service (KMS) master encryption key that was used for the object.\n* `storage_class` - [Storage class](http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) information of the object. Available for all objects except for `Standard` storage class objects.\n* `version_id` - Latest version ID of the object returned.\n* `website_redirect_location` - If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.\n* `tags`  - Map of tags assigned to the object.\n\n-> **Note:** Terraform ignores all leading `/`s in the object's `key` and treats multiple `/`s in the rest of the object's `key` as a single `/`, so values of `/index.html` and `index.html` correspond to the same S3 object as do `first//second///third//` and `first/second/third/`.\n",
      "language": "hcl",
      "path": "website/docs/d/s3_bucket_object.html.markdown",
      "slug": "s3_bucket_object",
      "subcategory": "S3 (Simple Storage)",
      "title": "s3_bucket_object",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3224723"
    }
  }
}