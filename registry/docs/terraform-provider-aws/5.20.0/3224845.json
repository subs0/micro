{
  "data": {
    "type": "provider-docs",
    "id": "3224845",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"API Gateway\"\nlayout: \"aws\"\npage_title: \"AWS: aws_api_gateway_deployment\"\ndescription: |-\n  Manages an API Gateway REST Deployment.\n---\n\n# Resource: aws_api_gateway_deployment\n\nManages an API Gateway REST Deployment. A deployment is a snapshot of the REST API configuration. The deployment can then be published to callable endpoints via the [`aws_api_gateway_stage` resource](api_gateway_stage.html) and optionally managed further with the [`aws_api_gateway_base_path_mapping` resource](api_gateway_base_path_mapping.html), [`aws_api_gateway_domain_name` resource](api_gateway_domain_name.html), and [`aws_api_method_settings` resource](api_gateway_method_settings.html). For more information, see the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html).\n\nTo properly capture all REST API configuration in a deployment, this resource must have dependencies on all prior Terraform resources that manage resources/paths, methods, integrations, etc.\n\n* For REST APIs that are configured via OpenAPI specification ([`aws_api_gateway_rest_api` resource](api_gateway_rest_api.html) `body` argument), no special dependency setup is needed beyond referencing the  `id` attribute of that resource unless additional Terraform resources have further customized the REST API.\n* When the REST API configuration involves other Terraform resources ([`aws_api_gateway_integration` resource](api_gateway_integration.html), etc.), the dependency setup can be done with implicit resource references in the `triggers` argument or explicit resource references using the [resource `depends_on` meta-argument](https://www.terraform.io/docs/configuration/meta-arguments/depends_on.html). The `triggers` argument should be preferred over `depends_on`, since `depends_on` can only capture dependency ordering and will not cause the resource to recreate (redeploy the REST API) with upstream configuration changes.\n\n!> **WARNING:** We recommend using the [`aws_api_gateway_stage` resource](api_gateway_stage.html) instead of managing an API Gateway Stage via the `stage_name` argument of this resource. When this resource is recreated (REST API redeployment) with the `stage_name` configured, the stage is deleted and recreated. This will cause a temporary service interruption, increase Terraform plan differences, and can require a second Terraform apply to recreate any downstream stage configuration such as associated `aws_api_method_settings` resources.\n\n~> **NOTE:** Enable the [resource `lifecycle` configuration block `create_before_destroy` argument](https://www.terraform.io/language/meta-arguments/lifecycle#create_before_destroy) in this resource configuration to properly order redeployments in Terraform. Without enabling `create_before_destroy`, API Gateway can return errors such as `BadRequestException: Active stages pointing to this deployment must be moved or deleted` on recreation.\n\n## Example Usage\n\n### OpenAPI Specification\n\nAn end-to-end example of a REST API configured with OpenAPI can be found in the [`/examples/api-gateway-rest-api-openapi` directory within the GitHub repository](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/api-gateway-rest-api-openapi).\n\n```terraform\nresource \"aws_api_gateway_rest_api\" \"example\" {\n  body = jsonencode({\n    openapi = \"3.0.1\"\n    info = {\n      title   = \"example\"\n      version = \"1.0\"\n    }\n    paths = {\n      \"/path1\" = {\n        get = {\n          x-amazon-apigateway-integration = {\n            httpMethod           = \"GET\"\n            payloadFormatVersion = \"1.0\"\n            type                 = \"HTTP_PROXY\"\n            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"\n          }\n        }\n      }\n    }\n  })\n\n  name = \"example\"\n}\n\nresource \"aws_api_gateway_deployment\" \"example\" {\n  rest_api_id = aws_api_gateway_rest_api.example.id\n\n  triggers = {\n    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\nresource \"aws_api_gateway_stage\" \"example\" {\n  deployment_id = aws_api_gateway_deployment.example.id\n  rest_api_id   = aws_api_gateway_rest_api.example.id\n  stage_name    = \"example\"\n}\n```\n\n### Terraform Resources\n\n```terraform\nresource \"aws_api_gateway_rest_api\" \"example\" {\n  name = \"example\"\n}\n\nresource \"aws_api_gateway_resource\" \"example\" {\n  parent_id   = aws_api_gateway_rest_api.example.root_resource_id\n  path_part   = \"example\"\n  rest_api_id = aws_api_gateway_rest_api.example.id\n}\n\nresource \"aws_api_gateway_method\" \"example\" {\n  authorization = \"NONE\"\n  http_method   = \"GET\"\n  resource_id   = aws_api_gateway_resource.example.id\n  rest_api_id   = aws_api_gateway_rest_api.example.id\n}\n\nresource \"aws_api_gateway_integration\" \"example\" {\n  http_method = aws_api_gateway_method.example.http_method\n  resource_id = aws_api_gateway_resource.example.id\n  rest_api_id = aws_api_gateway_rest_api.example.id\n  type        = \"MOCK\"\n}\n\nresource \"aws_api_gateway_deployment\" \"example\" {\n  rest_api_id = aws_api_gateway_rest_api.example.id\n\n  triggers = {\n    # NOTE: The configuration below will satisfy ordering considerations,\n    #       but not pick up all future REST API changes. More advanced patterns\n    #       are possible, such as using the filesha1() function against the\n    #       Terraform configuration file(s) or removing the .id references to\n    #       calculate a hash against whole resources. Be aware that using whole\n    #       resources will show a difference after the initial implementation.\n    #       It will stabilize to only change when resources change afterwards.\n    redeployment = sha1(jsonencode([\n      aws_api_gateway_resource.example.id,\n      aws_api_gateway_method.example.id,\n      aws_api_gateway_integration.example.id,\n    ]))\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\nresource \"aws_api_gateway_stage\" \"example\" {\n  deployment_id = aws_api_gateway_deployment.example.id\n  rest_api_id   = aws_api_gateway_rest_api.example.id\n  stage_name    = \"example\"\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `rest_api_id` - (Required) REST API identifier.\n* `description` - (Optional) Description of the deployment\n* `stage_name` - (Optional) Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the [`aws_api_gateway_stage` resource](api_gateway_stage.html) instead to manage stages.\n* `stage_description` - (Optional) Description to set on the stage managed by the `stage_name` argument.\n* `triggers` - (Optional) Map of arbitrary keys and values that, when changed, will trigger a redeployment. To force a redeployment without changing these keys/values, use the [`-replace` option](https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address) with `terraform plan` or `terraform apply`.\n* `variables` - (Optional) Map to set on the stage managed by the `stage_name` argument.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - ID of the deployment\n* `invoke_url` - URL to invoke the API pointing to the stage,\n  e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`\n* `execution_arn` - Execution ARN to be used in [`lambda_permission`](/docs/providers/aws/r/lambda_permission.html)'s `source_arn`\n  when allowing API Gateway to invoke a Lambda function,\n  e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`\n* `created_date` - Creation date of the deployment\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_api_gateway_deployment` using `REST-API-ID/DEPLOYMENT-ID`. For example:\n\n```terraform\nimport {\n  to = aws_api_gateway_deployment.example\n  id = \"aabbccddee/1122334\"\n}\n```\n\nUsing `terraform import`, import `aws_api_gateway_deployment` using `REST-API-ID/DEPLOYMENT-ID`. For example:\n\n```console\n% terraform import aws_api_gateway_deployment.example aabbccddee/1122334\n```\n\nThe `stage_name`, `stage_description`, and `variables` arguments cannot be imported. Use the [`aws_api_gateway_stage` resource](api_gateway_stage.html) to import and manage stages.\n\nThe `triggers` argument cannot be imported.\n",
      "language": "hcl",
      "path": "website/docs/r/api_gateway_deployment.html.markdown",
      "slug": "api_gateway_deployment",
      "subcategory": "API Gateway",
      "title": "api_gateway_deployment",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3224845"
    }
  }
}