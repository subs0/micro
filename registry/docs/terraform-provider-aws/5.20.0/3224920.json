{
  "data": {
    "type": "provider-docs",
    "id": "3224920",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"AppSync\"\nlayout: \"aws\"\npage_title: \"AWS: aws_appsync_graphql_api\"\ndescription: |-\n  Provides an AppSync GraphQL API.\n---\n\n# Resource: aws_appsync_graphql_api\n\nProvides an AppSync GraphQL API.\n\n## Example Usage\n\n### API Key Authentication\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"API_KEY\"\n  name                = \"example\"\n}\n```\n\n### AWS IAM Authentication\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"AWS_IAM\"\n  name                = \"example\"\n}\n```\n\n### AWS Cognito User Pool Authentication\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"AMAZON_COGNITO_USER_POOLS\"\n  name                = \"example\"\n\n  user_pool_config {\n    aws_region     = data.aws_region.current.name\n    default_action = \"DENY\"\n    user_pool_id   = aws_cognito_user_pool.example.id\n  }\n}\n```\n\n### OpenID Connect Authentication\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"OPENID_CONNECT\"\n  name                = \"example\"\n\n  openid_connect_config {\n    issuer = \"https://example.com\"\n  }\n}\n```\n\n### AWS Lambda Authorizer Authentication\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"AWS_LAMBDA\"\n  name                = \"example\"\n\n  lambda_authorizer_config {\n    authorizer_uri = \"arn:aws:lambda:us-east-1:123456789012:function:custom_lambda_authorizer\"\n  }\n}\n\nresource \"aws_lambda_permission\" \"appsync_lambda_authorizer\" {\n  statement_id  = \"appsync_lambda_authorizer\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = \"custom_lambda_authorizer\"\n  principal     = \"appsync.amazonaws.com\"\n  source_arn    = aws_appsync_graphql_api.example.arn\n}\n```\n\n### With Multiple Authentication Providers\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"API_KEY\"\n  name                = \"example\"\n\n  additional_authentication_provider {\n    authentication_type = \"AWS_IAM\"\n  }\n}\n```\n\n### With Schema\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"AWS_IAM\"\n  name                = \"example\"\n\n  schema = <<EOF\nschema {\n\tquery: Query\n}\ntype Query {\n  test: Int\n}\nEOF\n}\n```\n\n### Enabling Logging\n\n```terraform\ndata \"aws_iam_policy_document\" \"assume_role\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"appsync.amazonaws.com\"]\n    }\n\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\nresource \"aws_iam_role\" \"example\" {\n  name               = \"example\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\n}\n\nresource \"aws_iam_role_policy_attachment\" \"example\" {\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs\"\n  role       = aws_iam_role.example.name\n}\n\nresource \"aws_appsync_graphql_api\" \"example\" {\n  # ... other configuration ...\n\n  log_config {\n    cloudwatch_logs_role_arn = aws_iam_role.example.arn\n    field_log_level          = \"ERROR\"\n  }\n}\n```\n\n### Associate Web ACL (v2)\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"example\" {\n  authentication_type = \"API_KEY\"\n  name                = \"example\"\n}\n\nresource \"aws_wafv2_web_acl_association\" \"example\" {\n  resource_arn = aws_appsync_graphql_api.example.arn\n  web_acl_arn  = aws_wafv2_web_acl.example.arn\n}\n\nresource \"aws_wafv2_web_acl\" \"example\" {\n  name        = \"managed-rule-example\"\n  description = \"Example of a managed rule.\"\n  scope       = \"REGIONAL\"\n\n  default_action {\n    allow {}\n  }\n\n  rule {\n    name     = \"rule-1\"\n    priority = 1\n\n    override_action {\n      block {}\n    }\n\n    statement {\n      managed_rule_group_statement {\n        name        = \"AWSManagedRulesCommonRuleSet\"\n        vendor_name = \"AWS\"\n      }\n    }\n\n    visibility_config {\n      cloudwatch_metrics_enabled = false\n      metric_name                = \"friendly-rule-metric-name\"\n      sampled_requests_enabled   = false\n    }\n  }\n\n  visibility_config {\n    cloudwatch_metrics_enabled = false\n    metric_name                = \"friendly-metric-name\"\n    sampled_requests_enabled   = false\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `authentication_type` - (Required) Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`\n* `name` - (Required) User-supplied name for the GraphqlApi.\n* `log_config` - (Optional) Nested argument containing logging configuration. Defined below.\n* `openid_connect_config` - (Optional) Nested argument containing OpenID Connect configuration. Defined below.\n* `user_pool_config` - (Optional) Amazon Cognito User Pool configuration. Defined below.\n* `lambda_authorizer_config` - (Optional) Nested argument containing Lambda authorizer configuration. Defined below.\n* `schema` - (Optional) Schema definition, in GraphQL schema language format. Terraform cannot perform drift detection of this configuration.\n* `additional_authentication_provider` - (Optional) One or more additional authentication providers for the GraphqlApi. Defined below.\n* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n* `xray_enabled` - (Optional) Whether tracing with X-ray is enabled. Defaults to false.\n* `visibility` - (Optional) Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.\n\n### log_config\n\nThis argument supports the following arguments:\n\n* `cloudwatch_logs_role_arn` - (Required) Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.\n* `field_log_level` - (Required) Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.\n* `exclude_verbose_content` - (Optional) Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`\n\n### additional_authentication_provider\n\nThis argument supports the following arguments:\n\n* `authentication_type` - (Required) Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`\n* `openid_connect_config` - (Optional) Nested argument containing OpenID Connect configuration. Defined below.\n* `user_pool_config` - (Optional) Amazon Cognito User Pool configuration. Defined below.\n\n### openid_connect_config\n\nThis argument supports the following arguments:\n\n* `issuer` - (Required) Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.\n* `auth_ttl` - (Optional) Number of milliseconds a token is valid after being authenticated.\n* `client_id` - (Optional) Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.\n* `iat_ttl` - (Optional) Number of milliseconds a token is valid after being issued to a user.\n\n### user_pool_config\n\nThis argument supports the following arguments:\n\n* `default_action` - (Required only if Cognito is used as the default auth provider) Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`\n* `user_pool_id` - (Required) User pool ID.\n* `app_id_client_regex` - (Optional) Regular expression for validating the incoming Amazon Cognito User Pool app client ID.\n* `aws_region` - (Optional) AWS region in which the user pool was created.\n\n### lambda_authorizer_config\n\nThis argument supports the following arguments:\n\n* `authorizer_uri` - (Required) ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.\n* `authorizer_result_ttl_in_seconds` - (Optional) Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.\n* `identity_validation_expression` - (Optional) Regular expression for validation of tokens before the Lambda function is called.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - API ID\n* `arn` - ARN\n* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n* `uris` - Map of URIs associated with the APIE.g., `uris[\"GRAPHQL\"] = https://ID.appsync-api.REGION.amazonaws.com/graphql`\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AppSync GraphQL API using the GraphQL API ID. For example:\n\n```terraform\nimport {\n  to = aws_appsync_graphql_api.example\n  id = \"0123456789\"\n}\n```\n\nUsing `terraform import`, import AppSync GraphQL API using the GraphQL API ID. For example:\n\n```console\n% terraform import aws_appsync_graphql_api.example 0123456789\n```\n",
      "language": "hcl",
      "path": "website/docs/r/appsync_graphql_api.html.markdown",
      "slug": "appsync_graphql_api",
      "subcategory": "AppSync",
      "title": "appsync_graphql_api",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3224920"
    }
  }
}