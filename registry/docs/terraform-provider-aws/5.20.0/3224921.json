{
  "data": {
    "type": "provider-docs",
    "id": "3224921",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"AppSync\"\nlayout: \"aws\"\npage_title: \"AWS: aws_appsync_resolver\"\ndescription: |-\n  Provides an AppSync Resolver.\n---\n\n# Resource: aws_appsync_resolver\n\nProvides an AppSync Resolver.\n\n## Example Usage\n\n```terraform\nresource \"aws_appsync_graphql_api\" \"test\" {\n  authentication_type = \"API_KEY\"\n  name                = \"tf-example\"\n\n  schema = <<EOF\ntype Mutation {\n\tputPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n\tid: ID!\n\ttitle: String!\n}\n\ntype Query {\n\tsinglePost(id: ID!): Post\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}\nEOF\n}\n\nresource \"aws_appsync_datasource\" \"test\" {\n  api_id = aws_appsync_graphql_api.test.id\n  name   = \"tf_example\"\n  type   = \"HTTP\"\n\n  http_config {\n    endpoint = \"http://example.com\"\n  }\n}\n\n# UNIT type resolver (default)\nresource \"aws_appsync_resolver\" \"test\" {\n  api_id      = aws_appsync_graphql_api.test.id\n  field       = \"singlePost\"\n  type        = \"Query\"\n  data_source = aws_appsync_datasource.test.name\n\n  request_template = <<EOF\n{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\nEOF\n\n  response_template = <<EOF\n#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\nEOF\n\n  caching_config {\n    caching_keys = [\n      \"$context.identity.sub\",\n      \"$context.arguments.id\",\n    ]\n    ttl = 60\n  }\n}\n\n# PIPELINE type resolver\nresource \"aws_appsync_resolver\" \"Mutation_pipelineTest\" {\n  type              = \"Mutation\"\n  api_id            = aws_appsync_graphql_api.test.id\n  field             = \"pipelineTest\"\n  request_template  = \"{}\"\n  response_template = \"$util.toJson($ctx.result)\"\n  kind              = \"PIPELINE\"\n  pipeline_config {\n    functions = [\n      aws_appsync_function.test1.function_id,\n      aws_appsync_function.test2.function_id,\n      aws_appsync_function.test3.function_id,\n    ]\n  }\n}\n```\n\n## Example Usage JS\n\n```terraform\nresource \"aws_appsync_resolver\" \"example\" {\n  type   = \"Query\"\n  api_id = aws_appsync_graphql_api.test.id\n  field  = \"pipelineTest\"\n  kind   = \"PIPELINE\"\n  code   = file(\"some-code-dir\")\n\n  runtime {\n    name            = \"APPSYNC_JS\"\n    runtime_version = \"1.0.0\"\n  }\n\n  pipeline_config {\n    functions = [\n      aws_appsync_function.test.function_id,\n    ]\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `api_id` - (Required) API ID for the GraphQL API.\n* `code` - (Optional) The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.\n* `type` - (Required) Type name from the schema defined in the GraphQL API.\n* `field` - (Required) Field name from the schema defined in the GraphQL API.\n* `request_template` - (Optional) Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n* `response_template` - (Optional) Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n* `data_source` - (Optional) Data source name.\n* `max_batch_size` - (Optional) Maximum batching size for a resolver. Valid values are between `0` and `2000`.\n* `kind`  - (Optional) Resolver type. Valid values are `UNIT` and `PIPELINE`.\n* `sync_config` - (Optional) Describes a Sync configuration for a resolver. See [Sync Config](#sync-config).\n* `pipeline_config` - (Optional) The caching configuration for the resolver. See [Pipeline Config](#pipeline-config).\n* `caching_config` - (Optional) The Caching Config. See [Caching Config](#caching-config).\n* `runtime` - (Optional) Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See [Runtime](#runtime).\n\n### Caching Config\n\n* `caching_keys` - (Optional) The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.\n* `ttl` - (Optional) The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.\n\n### Pipeline Config\n\n* `functions` - (Optional) A list of Function objects.\n\n### Sync Config\n\n* `conflict_detection` - (Optional) Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.\n* `conflict_handler` - (Optional) Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.\n* `lambda_conflict_handler_config` - (Optional) Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See [Lambda Conflict Handler Config](#lambda-conflict-handler-config).\n\n#### Lambda Conflict Handler Config\n\n* `lambda_conflict_handler_arn` - (Optional) ARN for the Lambda function to use as the Conflict Handler.\n\n### Runtime\n\n* `name` - (Optional) The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.\n* `runtime_version` - (Optional) The version of the runtime to use. Currently, the only allowed version is `1.0.0`.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - ARN\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_appsync_resolver` using the `api_id`, a hyphen, `type`, a hypen and `field`. For example:\n\n```terraform\nimport {\n  to = aws_appsync_resolver.example\n  id = \"abcdef123456-exampleType-exampleField\"\n}\n```\n\nUsing `terraform import`, import `aws_appsync_resolver` using the `api_id`, a hyphen, `type`, a hypen and `field`. For example:\n\n```console\n% terraform import aws_appsync_resolver.example abcdef123456-exampleType-exampleField\n```\n",
      "language": "hcl",
      "path": "website/docs/r/appsync_resolver.html.markdown",
      "slug": "appsync_resolver",
      "subcategory": "AppSync",
      "title": "appsync_resolver",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3224921"
    }
  }
}