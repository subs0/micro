{
  "data": {
    "type": "provider-docs",
    "id": "3225193",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"DynamoDB\"\nlayout: \"aws\"\npage_title: \"AWS: aws_dynamodb_global_table\"\ndescription: |-\n  Manages DynamoDB Global Tables V1 (version 2017.11.29)\n---\n\n# Resource: aws_dynamodb_global_table\n\nManages [DynamoDB Global Tables V1 (version 2017.11.29)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html). These are layered on top of existing DynamoDB Tables.\n\n~> **NOTE:** To instead manage [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html), use the [`aws_dynamodb_table` resource](/docs/providers/aws/r/dynamodb_table.html) `replica` configuration block.\n\n~> Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.\n\n## Example Usage\n\n```terraform\nprovider \"aws\" {\n  alias  = \"us-east-1\"\n  region = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"us-west-2\"\n  region = \"us-west-2\"\n}\n\nresource \"aws_dynamodb_table\" \"us-east-1\" {\n  provider = aws.us-east-1\n\n  hash_key         = \"myAttribute\"\n  name             = \"myTable\"\n  stream_enabled   = true\n  stream_view_type = \"NEW_AND_OLD_IMAGES\"\n  read_capacity    = 1\n  write_capacity   = 1\n\n  attribute {\n    name = \"myAttribute\"\n    type = \"S\"\n  }\n}\n\nresource \"aws_dynamodb_table\" \"us-west-2\" {\n  provider = aws.us-west-2\n\n  hash_key         = \"myAttribute\"\n  name             = \"myTable\"\n  stream_enabled   = true\n  stream_view_type = \"NEW_AND_OLD_IMAGES\"\n  read_capacity    = 1\n  write_capacity   = 1\n\n  attribute {\n    name = \"myAttribute\"\n    type = \"S\"\n  }\n}\n\nresource \"aws_dynamodb_global_table\" \"myTable\" {\n  depends_on = [\n    aws_dynamodb_table.us-east-1,\n    aws_dynamodb_table.us-west-2,\n  ]\n  provider = aws.us-east-1\n\n  name = \"myTable\"\n\n  replica {\n    region_name = \"us-east-1\"\n  }\n\n  replica {\n    region_name = \"us-west-2\"\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `name` - (Required) The name of the global table. Must match underlying DynamoDB Table names in all regions.\n* `replica` - (Required) Underlying DynamoDB Table. At least 1 replica must be defined. See below.\n\n### Nested Fields\n\n#### `replica`\n\n* `region_name` - (Required) AWS region name of replica DynamoDB TableE.g., `us-east-1`\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - The name of the DynamoDB Global Table\n* `arn` - The ARN of the DynamoDB Global Table\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DynamoDB Global Tables using the global table name. For example:\n\n```terraform\nimport {\n  to = aws_dynamodb_global_table.MyTable\n  id = \"MyTable\"\n}\n```\n\nUsing `terraform import`, import DynamoDB Global Tables using the global table name. For example:\n\n```console\n% terraform import aws_dynamodb_global_table.MyTable MyTable\n```\n",
      "language": "hcl",
      "path": "website/docs/r/dynamodb_global_table.html.markdown",
      "slug": "dynamodb_global_table",
      "subcategory": "DynamoDB",
      "title": "dynamodb_global_table",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3225193"
    }
  }
}