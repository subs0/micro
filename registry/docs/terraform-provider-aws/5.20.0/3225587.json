{
  "data": {
    "type": "provider-docs",
    "id": "3225587",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"VPC (Virtual Private Cloud)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_network_acl_rule\"\ndescription: |-\n  Provides an network ACL Rule resource.\n---\n\n# Resource: aws_network_acl_rule\n\nCreates an entry (a rule) in a network ACL with the specified rule number.\n\n~> **NOTE on Network ACLs and Network ACL Rules:** Terraform currently\nprovides both a standalone Network ACL Rule resource and a [Network ACL](network_acl.html) resource with rules\ndefined in-line. At this time you cannot use a Network ACL with in-line rules\nin conjunction with any Network ACL Rule resources. Doing so will cause\na conflict of rule settings and will overwrite rules.\n\n## Example Usage\n\n```terraform\nresource \"aws_network_acl\" \"bar\" {\n  vpc_id = aws_vpc.foo.id\n}\n\nresource \"aws_network_acl_rule\" \"bar\" {\n  network_acl_id = aws_network_acl.bar.id\n  rule_number    = 200\n  egress         = false\n  protocol       = \"tcp\"\n  rule_action    = \"allow\"\n  cidr_block     = aws_vpc.foo.cidr_block\n  from_port      = 22\n  to_port        = 22\n}\n```\n\n~> **Note:** One of either `cidr_block` or `ipv6_cidr_block` is required.\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `network_acl_id` - (Required) The ID of the network ACL.\n* `rule_number` - (Required) The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.\n* `egress` - (Optional, bool) Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.\n* `protocol` - (Required) The protocol. A value of -1 means all protocols.\n* `rule_action` - (Required) Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`\n* `cidr_block` - (Optional) The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).\n* `ipv6_cidr_block` - (Optional) The IPv6 CIDR block to allow or deny.\n* `from_port` - (Optional) The from port to match.\n* `to_port` - (Optional) The to port to match.\n* `icmp_type` - (Optional) ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1\n* `icmp_code` - (Optional) ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1\n\n~> **NOTE:** If the value of `protocol` is `-1` or `all`, the `from_port` and `to_port` values will be ignored and the rule will apply to all ports.\n\n~> **NOTE:** If the value of `icmp_type` is `-1` (which results in a wildcard ICMP type), the `icmp_code` must also be set to `-1` (wildcard ICMP code).\n\n~> Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - The ID of the network ACL Rule\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import individual rules using `NETWORK_ACL_ID:RULE_NUMBER:PROTOCOL:EGRESS`, where `PROTOCOL` can be a decimal (such as \"6\") or string (such as \"tcp\") value. For example:\n\n**NOTE:** If importing a rule previously provisioned by Terraform, the `PROTOCOL` must be the input value used at creation time. For more information on protocol numbers and keywords, see here: https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml.\n\nUsing the procotol's string value:\n\n```terraform\nimport {\n  to = aws_network_acl_rule.my_rule\n  id = \"acl-7aaabd18:100:tcp:false\"\n}\n```\n\nUsing the procotol's decimal value:\n\n```terraform\nimport {\n  to = aws_network_acl_rule.my_rule\n  id = \"acl-7aaabd18:100:6:false\"\n}\n```\n\n**Using `terraform import` to import** individual rules using `NETWORK_ACL_ID:RULE_NUMBER:PROTOCOL:EGRESS`, where `PROTOCOL` can be a decimal (such as \"6\") or string (such as \"tcp\") value. For example:\n\nUsing the procotol's string value:\n\n```console\n% terraform import aws_network_acl_rule.my_rule acl-7aaabd18:100:tcp:false\n```\n\nUsing the procotol's decimal value:\n\n```console\n% terraform import aws_network_acl_rule.my_rule acl-7aaabd18:100:6:false\n```\n",
      "language": "hcl",
      "path": "website/docs/r/network_acl_rule.html.markdown",
      "slug": "network_acl_rule",
      "subcategory": "VPC (Virtual Private Cloud)",
      "title": "network_acl_rule",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3225587"
    }
  }
}