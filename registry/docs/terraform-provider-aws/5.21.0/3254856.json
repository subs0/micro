{
  "data": {
    "type": "provider-docs",
    "id": "3254856",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"Auto Scaling\"\nlayout: \"aws\"\npage_title: \"AWS: aws_autoscaling_policy\"\ndescription: |-\n  Provides an AutoScaling Scaling Group resource.\n---\n\n# Resource: aws_autoscaling_policy\n\nProvides an AutoScaling Scaling Policy resource.\n\n~> **NOTE:** You may want to omit `desired_capacity` attribute from attached `aws_autoscaling_group`\nwhen using autoscaling policies. It's good practice to pick either\n[manual](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-manual-scaling.html)\nor [dynamic](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-scale-based-on-demand.html)\n(policy-based) scaling.\n\n> **Hands-on:** Try the [Manage AWS Auto Scaling Groups](https://learn.hashicorp.com/tutorials/terraform/aws-asg?utm_source=WEBSITE&utm_medium=WEB_IO&utm_offer=ARTICLE_PAGE&utm_content=DOCS) tutorial on HashiCorp Learn.\n\n## Example Usage\n\n```terraform\nresource \"aws_autoscaling_policy\" \"bat\" {\n  name                   = \"foobar3-terraform-test\"\n  scaling_adjustment     = 4\n  adjustment_type        = \"ChangeInCapacity\"\n  cooldown               = 300\n  autoscaling_group_name = aws_autoscaling_group.bar.name\n}\n\nresource \"aws_autoscaling_group\" \"bar\" {\n  availability_zones        = [\"us-east-1a\"]\n  name                      = \"foobar3-terraform-test\"\n  max_size                  = 5\n  min_size                  = 2\n  health_check_grace_period = 300\n  health_check_type         = \"ELB\"\n  force_delete              = true\n  launch_configuration      = aws_launch_configuration.foo.name\n}\n```\n\n### Create target tracking scaling policy using metric math\n\n```terraform\nresource \"aws_autoscaling_policy\" \"example\" {\n  autoscaling_group_name = \"my-test-asg\"\n  name                   = \"foo\"\n  policy_type            = \"TargetTrackingScaling\"\n  target_tracking_configuration {\n    target_value = 100\n    customized_metric_specification {\n      metrics {\n        label = \"Get the queue size (the number of messages waiting to be processed)\"\n        id    = \"m1\"\n        metric_stat {\n          metric {\n            namespace   = \"AWS/SQS\"\n            metric_name = \"ApproximateNumberOfMessagesVisible\"\n            dimensions {\n              name  = \"QueueName\"\n              value = \"my-queue\"\n            }\n          }\n          stat = \"Sum\"\n        }\n        return_data = false\n      }\n      metrics {\n        label = \"Get the group size (the number of InService instances)\"\n        id    = \"m2\"\n        metric_stat {\n          metric {\n            namespace   = \"AWS/AutoScaling\"\n            metric_name = \"GroupInServiceInstances\"\n            dimensions {\n              name  = \"AutoScalingGroupName\"\n              value = \"my-asg\"\n            }\n          }\n          stat = \"Average\"\n        }\n        return_data = false\n      }\n      metrics {\n        label       = \"Calculate the backlog per instance\"\n        id          = \"e1\"\n        expression  = \"m1 / m2\"\n        return_data = true\n      }\n    }\n  }\n}\n```\n\n### Create predictive scaling policy using customized metrics\n\n```terraform\nresource \"aws_autoscaling_policy\" \"example\" {\n  autoscaling_group_name = \"my-test-asg\"\n  name                   = \"foo\"\n  policy_type            = \"PredictiveScaling\"\n  predictive_scaling_configuration {\n    metric_specification {\n      target_value = 10\n      customized_load_metric_specification {\n        metric_data_queries {\n          id         = \"load_sum\"\n          expression = \"SUM(SEARCH('{AWS/EC2,AutoScalingGroupName} MetricName=\\\"CPUUtilization\\\" my-test-asg', 'Sum', 3600))\"\n        }\n      }\n      customized_capacity_metric_specification {\n        metric_data_queries {\n          id         = \"capacity_sum\"\n          expression = \"SUM(SEARCH('{AWS/AutoScaling,AutoScalingGroupName} MetricName=\\\"GroupInServiceIntances\\\" my-test-asg', 'Average', 300))\"\n        }\n      }\n      customized_scaling_metric_specification {\n        metric_data_queries {\n          id          = \"capacity_sum\"\n          expression  = \"SUM(SEARCH('{AWS/AutoScaling,AutoScalingGroupName} MetricName=\\\"GroupInServiceIntances\\\" my-test-asg', 'Average', 300))\"\n          return_data = false\n        }\n        metric_data_queries {\n          id          = \"load_sum\"\n          expression  = \"SUM(SEARCH('{AWS/EC2,AutoScalingGroupName} MetricName=\\\"CPUUtilization\\\" my-test-asg', 'Sum', 300))\"\n          return_data = false\n        }\n        metric_data_queries {\n          id         = \"weighted_average\"\n          expression = \"load_sum / (capacity_sum * PERIOD(capacity_sum) / 60)\"\n        }\n      }\n    }\n  }\n}\n```\n\n### Create predictive scaling policy using customized scaling and predefined load metric\n\n```terraform\nresource \"aws_autoscaling_policy\" \"example\" {\n  autoscaling_group_name = \"my-test-asg\"\n  name                   = \"foo\"\n  policy_type            = \"PredictiveScaling\"\n  predictive_scaling_configuration {\n    metric_specification {\n      target_value = 10\n      predefined_load_metric_specification {\n        predefined_metric_type = \"ASGTotalCPUUtilization\"\n        resource_label         = \"testLabel\"\n      }\n      customized_scaling_metric_specification {\n        metric_data_queries {\n          id = \"scaling\"\n          metric_stat {\n            metric {\n              metric_name = \"CPUUtilization\"\n              namespace   = \"AWS/EC2\"\n              dimensions {\n                name  = \"AutoScalingGroupName\"\n                value = \"my-test-asg\"\n              }\n            }\n            stat = \"Average\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Argument Reference\n\n* `name` - (Required) Name of the policy.\n* `autoscaling_group_name` - (Required) Name of the autoscaling group.\n* `adjustment_type` - (Optional) Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.\n* `policy_type` - (Optional) Policy type, either \"SimpleScaling\", \"StepScaling\", \"TargetTrackingScaling\", or \"PredictiveScaling\". If this value isn't provided, AWS will default to \"SimpleScaling.\"\n* `predictive_scaling_configuration` - (Optional) Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.\n* `estimated_instance_warmup` - (Optional) Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.\n* `enabled` - (Optional) Whether the scaling policy is enabled or disabled. Default: `true`.\n\nThe following argument is only available to \"SimpleScaling\" and \"StepScaling\" type policies:\n\n* `min_adjustment_magnitude` - (Optional) Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.\n\nThe following arguments are only available to \"SimpleScaling\" type policies:\n\n* `cooldown` - (Optional) Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.\n* `scaling_adjustment` - (Optional) Number of instances by which to scale. `adjustment_type` determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.\n\nThe following arguments are only available to \"StepScaling\" type policies:\n\n* `metric_aggregation_type` - (Optional) Aggregation type for the policy's metrics. Valid values are \"Minimum\", \"Maximum\", and \"Average\". Without a value, AWS will treat the aggregation type as \"Average\".\n* `step_adjustment` - (Optional) Set of adjustments that manage\ngroup scaling. These have the following structure:\n\n```terraform\nresource \"aws_autoscaling_policy\" \"example\" {\n  # ... other configuration ...\n\n  step_adjustment {\n    scaling_adjustment          = -1\n    metric_interval_lower_bound = 1.0\n    metric_interval_upper_bound = 2.0\n  }\n\n  step_adjustment {\n    scaling_adjustment          = 1\n    metric_interval_lower_bound = 2.0\n    metric_interval_upper_bound = 3.0\n  }\n}\n```\n\nThe following fields are available in step adjustments:\n\n* `scaling_adjustment` - (Required) Number of members by which to\nscale, when the adjustment bounds are breached. A positive value scales\nup. A negative value scales down.\n* `metric_interval_lower_bound` - (Optional) Lower bound for the\ndifference between the alarm threshold and the CloudWatch metric.\nWithout a value, AWS will treat this bound as negative infinity.\n* `metric_interval_upper_bound` - (Optional) Upper bound for the\ndifference between the alarm threshold and the CloudWatch metric.\nWithout a value, AWS will treat this bound as positive infinity. The upper bound\nmust be greater than the lower bound.\n\nNotice the bounds are **relative** to the alarm threshold, meaning that the starting point is not 0%, but the alarm threshold. Check the official [docs](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps) for a detailed example.\n\nThe following arguments are only available to \"TargetTrackingScaling\" type policies:\n\n* `target_tracking_configuration` - (Optional) Target tracking policy. These have the following structure:\n\n```terraform\nresource \"aws_autoscaling_policy\" \"example\" {\n  # ... other configuration ...\n\n  target_tracking_configuration {\n    predefined_metric_specification {\n      predefined_metric_type = \"ASGAverageCPUUtilization\"\n    }\n\n    target_value = 40.0\n  }\n}\n```\n\nThe following fields are available in target tracking configuration:\n\n* `predefined_metric_specification` - (Optional) Predefined metric. Conflicts with `customized_metric_specification`.\n* `customized_metric_specification` - (Optional) Customized metric. Conflicts with `predefined_metric_specification`.\n* `target_value` - (Required) Target value for the metric.\n* `disable_scale_in` - (Optional, Default: false) Whether scale in by the target tracking policy is disabled.\n\n### predefined_metric_specification\n\nThis argument supports the following arguments:\n\n* `predefined_metric_type` - (Required) Metric type.\n* `resource_label` - (Optional) Identifies the resource associated with the metric type.\n\n### customized_metric_specification\n\nThis argument supports the following arguments:\n\n* `metric_dimension` - (Optional) Dimensions of the metric.\n* `metric_name` - (Optional) Name of the metric.\n* `namespace` - (Optional) Namespace of the metric.\n* `statistic` - (Optional) Statistic of the metric.\n* `unit` - (Optional) Unit of the metric.\n* `metrics` - (Optional) Metrics to include, as a metric data query.\n\n#### metric_dimension\n\nThis argument supports the following arguments:\n\n* `name` - (Required) Name of the dimension.\n* `value` - (Required) Value of the dimension.\n\n#### metrics\n\nThis argument supports the following arguments:\n\n* `expression` - (Optional) Math expression used on the returned metric. You must specify either `expression` or `metric_stat`, but not both.\n* `id` - (Required) Short name for the metric used in target tracking scaling policy.\n* `label` - (Optional) Human-readable label for this metric or expression.\n* `metric_stat` - (Optional) Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either `expression` or `metric_stat`, but not both.\n* `return_data` - (Optional) Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true\n\n##### metric_stat\n\nThis argument supports the following arguments:\n\n* `metric` - (Required) Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.\n* `stat` - (Required) Statistic of the metrics to return.\n* `unit` - (Optional) Unit of the metrics to return.\n\n##### metric\n\nThis argument supports the following arguments:\n\n* `dimensions` - (Optional) Dimensions of the metric.\n* `metric_name` - (Required) Name of the metric.\n* `namespace` - (Required) Namespace of the metric.\n\n###### dimensions\n\nThis argument supports the following arguments:\n\n* `name` - (Required) Name of the dimension.\n* `value` - (Required) Value of the dimension.\n\n### predictive_scaling_configuration\n\nThis argument supports the following arguments:\n\n* `max_capacity_breach_behavior` - (Optional) Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are `HonorMaxCapacity` or `IncreaseMaxCapacity`. Default is `HonorMaxCapacity`.\n* `max_capacity_buffer` - (Optional) Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is `0` to `100`. If set to `0`, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.\n* `metric_specification` - (Required) This structure includes the metrics and target utilization to use for predictive scaling.\n* `mode` - (Optional) Predictive scaling mode. Valid values are `ForecastAndScale` and `ForecastOnly`. Default is `ForecastOnly`.\n* `scheduling_buffer_time` - (Optional) Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is `0`.\n\n#### metric_specification\n\nThis argument supports the following arguments:\n\n* `customized_capacity_metric_specification` - (Optional) Customized capacity metric specification. The field is only valid when you use `customized_load_metric_specification`\n* `customized_load_metric_specification` - (Optional) Customized load metric specification.\n* `customized_scaling_metric_specification` - (Optional) Customized scaling metric specification.\n* `predefined_load_metric_specification` - (Optional) Predefined load metric specification.\n* `predefined_metric_pair_specification` - (Optional) Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.\n* `predefined_scaling_metric_specification` - (Optional) Predefined scaling metric specification.\n\n##### predefined_load_metric_specification\n\nThis argument supports the following arguments:\n\n* `predefined_metric_type` - (Required) Metric type. Valid values are `ASGTotalCPUUtilization`, `ASGTotalNetworkIn`, `ASGTotalNetworkOut`, or `ALBTargetGroupRequestCount`.\n* `resource_label` - (Required) Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.\n\n##### predefined_metric_pair_specification\n\nThis argument supports the following arguments:\n\n* `predefined_metric_type` - (Required) Which metrics to use. There are two different types of metrics for each metric type: one is a load metric and one is a scaling metric. For example, if the metric type is `ASGCPUUtilization`, the Auto Scaling group's total CPU metric is used as the load metric, and the average CPU metric is used for the scaling metric. Valid values are `ASGCPUUtilization`, `ASGNetworkIn`, `ASGNetworkOut`, or `ALBRequestCount`.\n* `resource_label` - (Required) Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.\n\n##### predefined_scaling_metric_specification\n\nThis argument supports the following arguments:\n\n* `predefined_metric_type` - (Required) Describes a scaling metric for a predictive scaling policy. Valid values are `ASGAverageCPUUtilization`, `ASGAverageNetworkIn`, `ASGAverageNetworkOut`, or `ALBRequestCountPerTarget`.\n* `resource_label` - (Required) Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.\n\n##### customized_scaling_metric_specification\n\nThis argument supports the following arguments:\n\n* `metric_data_queries` - (Required) List of up to 10 structures that defines custom scaling metric in predictive scaling policy\n\n##### customized_load_metric_specification\n\nThis argument supports the following arguments:\n\n* `metric_data_queries` - (Required) List of up to 10 structures that defines custom load metric in predictive scaling policy\n\n##### customized_capacity_metric_specification\n\nThis argument supports the following arguments:\n\n* `metric_data_queries` - (Required) List of up to 10 structures that defines custom capacity metric in predictive scaling policy\n\n##### metric_data_queries\n\nThis argument supports the following arguments:\n\n* `expression` - (Optional) Math expression used on the returned metric. You must specify either `expression` or `metric_stat`, but not both.\n* `id` - (Required) Short name for the metric used in predictive scaling policy.\n* `label` - (Optional) Human-readable label for this metric or expression.\n* `metric_stat` - (Optional) Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either `expression` or `metric_stat`, but not both.\n* `return_data` - (Optional) Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true\n\n##### metric_stat\n\nThis argument supports the following arguments:\n\n* `metric` - (Required) Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.\n* `stat` - (Required) Statistic of the metrics to return.\n* `unit` - (Optional) Unit of the metrics to return.\n\n##### metric\n\nThis argument supports the following arguments:\n\n* `dimensions` - (Optional) Dimensions of the metric.\n* `metric_name` - (Required) Name of the metric.\n* `namespace` - (Required) Namespace of the metric.\n\n##### dimensions\n\nThis argument supports the following arguments:\n\n* `name` - (Required) Name of the dimension.\n* `value` - (Required) Value of the dimension.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - ARN assigned by AWS to the scaling policy.\n* `name` - Scaling policy's name.\n* `autoscaling_group_name` - The scaling policy's assigned autoscaling group.\n* `adjustment_type` - Scaling policy's adjustment type.\n* `policy_type` - Scaling policy's type.\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AutoScaling scaling policy using the role autoscaling_group_name and name separated by `/`. For example:\n\n```terraform\nimport {\n  to = aws_autoscaling_policy.test-policy\n  id = \"asg-name/policy-name\"\n}\n```\n\nUsing `terraform import`, import AutoScaling scaling policy using the role autoscaling_group_name and name separated by `/`. For example:\n\n```console\n% terraform import aws_autoscaling_policy.test-policy asg-name/policy-name\n```\n",
      "language": "hcl",
      "path": "website/docs/r/autoscaling_policy.html.markdown",
      "slug": "autoscaling_policy",
      "subcategory": "Auto Scaling",
      "title": "autoscaling_policy",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3254856"
    }
  }
}