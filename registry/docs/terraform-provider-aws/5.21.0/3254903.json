{
  "data": {
    "type": "provider-docs",
    "id": "3254903",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"CloudFront\"\nlayout: \"aws\"\npage_title: \"AWS: aws_cloudfront_distribution\"\ndescription: |-\n  Provides a CloudFront web distribution resource.\n---\n\n# Resource: aws_cloudfront_distribution\n\nCreates an Amazon CloudFront web distribution.\n\nFor information about CloudFront distributions, see the [Amazon CloudFront Developer Guide][1]. For specific information about creating CloudFront web distributions, see the [POST Distribution][2] page in the Amazon CloudFront API Reference.\n\n~> **NOTE:** CloudFront distributions take about 15 minutes to reach a deployed state after creation or modification. During this time, deletes to resources will be blocked. If you need to delete a distribution that is enabled and you do not want to wait, you need to use the `retain_on_delete` flag.\n\n## Example Usage\n\n### S3 Origin\n\nThe example below creates a CloudFront distribution with an S3 origin.\n\n```terraform\nresource \"aws_s3_bucket\" \"b\" {\n  bucket = \"mybucket\"\n\n  tags = {\n    Name = \"My bucket\"\n  }\n}\n\nresource \"aws_s3_bucket_acl\" \"b_acl\" {\n  bucket = aws_s3_bucket.b.id\n  acl    = \"private\"\n}\n\nlocals {\n  s3_origin_id = \"myS3Origin\"\n}\n\nresource \"aws_cloudfront_distribution\" \"s3_distribution\" {\n  origin {\n    domain_name              = aws_s3_bucket.b.bucket_regional_domain_name\n    origin_access_control_id = aws_cloudfront_origin_access_control.default.id\n    origin_id                = local.s3_origin_id\n  }\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"Some comment\"\n  default_root_object = \"index.html\"\n\n  logging_config {\n    include_cookies = false\n    bucket          = \"mylogs.s3.amazonaws.com\"\n    prefix          = \"myprefix\"\n  }\n\n  aliases = [\"mysite.example.com\", \"yoursite.example.com\"]\n\n  default_cache_behavior {\n    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = local.s3_origin_id\n\n    forwarded_values {\n      query_string = false\n\n      cookies {\n        forward = \"none\"\n      }\n    }\n\n    viewer_protocol_policy = \"allow-all\"\n    min_ttl                = 0\n    default_ttl            = 3600\n    max_ttl                = 86400\n  }\n\n  # Cache behavior with precedence 0\n  ordered_cache_behavior {\n    path_pattern     = \"/content/immutable/*\"\n    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods   = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    target_origin_id = local.s3_origin_id\n\n    forwarded_values {\n      query_string = false\n      headers      = [\"Origin\"]\n\n      cookies {\n        forward = \"none\"\n      }\n    }\n\n    min_ttl                = 0\n    default_ttl            = 86400\n    max_ttl                = 31536000\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n  }\n\n  # Cache behavior with precedence 1\n  ordered_cache_behavior {\n    path_pattern     = \"/content/*\"\n    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = local.s3_origin_id\n\n    forwarded_values {\n      query_string = false\n\n      cookies {\n        forward = \"none\"\n      }\n    }\n\n    min_ttl                = 0\n    default_ttl            = 3600\n    max_ttl                = 86400\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n  }\n\n  price_class = \"PriceClass_200\"\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"whitelist\"\n      locations        = [\"US\", \"CA\", \"GB\", \"DE\"]\n    }\n  }\n\n  tags = {\n    Environment = \"production\"\n  }\n\n  viewer_certificate {\n    cloudfront_default_certificate = true\n  }\n}\n```\n\n### With Failover Routing\n\nThe example below creates a CloudFront distribution with an origin group for failover routing.\n\n```terraform\nresource \"aws_cloudfront_distribution\" \"s3_distribution\" {\n  origin_group {\n    origin_id = \"groupS3\"\n\n    failover_criteria {\n      status_codes = [403, 404, 500, 502]\n    }\n\n    member {\n      origin_id = \"primaryS3\"\n    }\n\n    member {\n      origin_id = \"failoverS3\"\n    }\n  }\n\n  origin {\n    domain_name = aws_s3_bucket.primary.bucket_regional_domain_name\n    origin_id   = \"primaryS3\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.default.cloudfront_access_identity_path\n    }\n  }\n\n  origin {\n    domain_name = aws_s3_bucket.failover.bucket_regional_domain_name\n    origin_id   = \"failoverS3\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.default.cloudfront_access_identity_path\n    }\n  }\n\n  default_cache_behavior {\n    # ... other configuration ...\n    target_origin_id = \"groupS3\"\n  }\n\n  # ... other configuration ...\n}\n```\n\n### With Managed Caching Policy\n\nThe example below creates a CloudFront distribution with an [AWS managed caching policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html).\n\n```terraform\nlocals {\n  s3_origin_id = \"myS3Origin\"\n}\n\nresource \"aws_cloudfront_distribution\" \"s3_distribution\" {\n  origin {\n    domain_name = aws_s3_bucket.primary.bucket_regional_domain_name\n    origin_id   = \"myS3Origin\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.default.cloudfront_access_identity_path\n    }\n  }\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"Some comment\"\n  default_root_object = \"index.html\"\n\n  # AWS Managed Caching Policy (CachingDisabled)\n  default_cache_behavior {\n    # Using the CachingDisabled managed policy ID:\n    cache_policy_id  = \"4135ea2d-6df8-44a3-9df3-4b5a84be39ad\"\n    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    target_origin_id = local.s3_origin_id\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"whitelist\"\n      locations        = [\"US\", \"CA\", \"GB\", \"DE\"]\n    }\n  }\n\n  viewer_certificate {\n    cloudfront_default_certificate = true\n  }\n\n  # ... other configuration ...\n}\n```\n\n## Argument Reference\n\nThe CloudFront distribution argument layout is a complex structure composed of several sub-resources - these resources are laid out below.\n\n### Top-Level Arguments\n\n* `aliases` (Optional) - Extra CNAMEs (alternate domain names), if any, for this distribution.\n* `comment` (Optional) - Any comments you want to include about the distribution.\n* `continuous_deployment_policy_id` (Optional) - Identifier of a continuous deployment policy. This argument should only be set on a production distribution. See the [`aws_cloudfront_continuous_deployment_policy` resource](./cloudfront_continuous_deployment_policy.html.markdown) for additional details.\n* `custom_error_response` (Optional) - One or more [custom error response](#custom-error-response-arguments) elements (multiples allowed).\n* `default_cache_behavior` (Required) - [Default cache behavior](#default-cache-behavior-arguments) for this distribution (maximum one). Requires either `cache_policy_id` (preferred) or `forwarded_values` (deprecated) be set.\n* `default_root_object` (Optional) - Object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.\n* `enabled` (Required) - Whether the distribution is enabled to accept end user requests for content.\n* `is_ipv6_enabled` (Optional) - Whether the IPv6 is enabled for the distribution.\n* `http_version` (Optional) - Maximum HTTP version to support on the distribution. Allowed values are `http1.1`, `http2`, `http2and3` and `http3`. The default is `http2`.\n* `logging_config` (Optional) - The [logging configuration](#logging-config-arguments) that controls how logs are written to your distribution (maximum one).\n* `ordered_cache_behavior` (Optional) - Ordered list of [cache behaviors](#cache-behavior-arguments) resource for this distribution. List from top to bottom in order of precedence. The topmost cache behavior will have precedence 0.\n* `origin` (Required) - One or more [origins](#origin-arguments) for this distribution (multiples allowed).\n* `origin_group` (Optional) - One or more [origin_group](#origin-group-arguments) for this distribution (multiples allowed).\n* `price_class` (Optional) - Price class for this distribution. One of `PriceClass_All`, `PriceClass_200`, `PriceClass_100`.\n* `restrictions` (Required) - The [restriction configuration](#restrictions-arguments) for this distribution (maximum one).\n* `staging` (Optional) - A Boolean that indicates whether this is a staging distribution. Defaults to `false`.\n* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n* `viewer_certificate` (Required) - The [SSL configuration](#viewer-certificate-arguments) for this distribution (maximum one).\n* `web_acl_id` (Optional) - Unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN, for example `aws_wafv2_web_acl.example.arn`. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example `aws_waf_web_acl.example.id`. The WAF Web ACL must exist in the WAF Global (CloudFront) region and the credentials configuring this argument must have `waf:GetWebACL` permissions assigned.\n* `retain_on_delete` (Optional) - Disables the distribution instead of deleting it when destroying the resource through Terraform. If this is set, the distribution needs to be deleted manually afterwards. Default: `false`.\n* `wait_for_deployment` (Optional) - If enabled, the resource will wait for the distribution status to change from `InProgress` to `Deployed`. Setting this to`false` will skip the process. Default: `true`.\n\n#### Cache Behavior Arguments\n\n~> **NOTE:** To achieve the setting of 'Use origin cache headers' without a linked cache policy, use the following TTL values: `min_ttl` = 0, `max_ttl` = 31536000, `default_ttl` = 86400. See [this issue](https://github.com/hashicorp/terraform-provider-aws/issues/19382) for additional context.\n\n* `allowed_methods` (Required) - Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.\n* `cached_methods` (Required) - Controls whether CloudFront caches the response to requests using the specified HTTP methods.\n* `cache_policy_id` (Optional) - Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.\n* `compress` (Optional) - Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).\n* `default_ttl` (Optional) - Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.\n* `field_level_encryption_id` (Optional) - Field level encryption configuration ID.\n* `forwarded_values` (Optional, **Deprecated** use `cache_policy_id` or `origin_request_policy_id ` instead) - The [forwarded values configuration](#forwarded-values-arguments) that specifies how CloudFront handles query strings, cookies and headers (maximum one).\n* `lambda_function_association` (Optional) - A [config block](#lambda-function-association) that triggers a lambda function with specific actions (maximum 4).\n* `function_association` (Optional) - A [config block](#function-association) that triggers a cloudfront function with specific actions (maximum 2).\n* `max_ttl` (Optional) - Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.\n* `min_ttl` (Optional) - Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.\n* `origin_request_policy_id` (Optional) - Unique identifier of the origin request policy that is attached to the behavior.\n* `path_pattern` (Required) - Pattern (for example, `images/*.jpg`) that specifies which requests you want this cache behavior to apply to.\n* `realtime_log_config_arn` (Optional) - ARN of the [real-time log configuration](cloudfront_realtime_log_config.html) that is attached to this cache behavior.\n* `response_headers_policy_id` (Optional) - Identifier for a response headers policy.\n* `smooth_streaming` (Optional) - Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.\n* `target_origin_id` (Required) - Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.\n* `trusted_key_groups` (Optional) - List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.\n* `trusted_signers` (Optional) - List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.\n* `viewer_protocol_policy` (Required) - Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.\n\n##### Forwarded Values Arguments\n\n* `cookies` (Required) - The [forwarded values cookies](#cookies-arguments) that specifies how CloudFront handles cookies (maximum one).\n* `headers` (Optional) - Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify `*` to include all headers.\n* `query_string` (Required) - Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.\n* `query_string_cache_keys` (Optional) - When specified, along with a value of `true` for `query_string`, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of `true` for `query_string`, all query string keys are cached.\n\n##### Lambda Function Association\n\nLambda@Edge allows you to associate an AWS Lambda Function with a predefined\nevent. You can associate a single function per event type. See [What is\nLambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/what-is-lambda-at-edge.html)\nfor more information.\n\nExample configuration:\n\n```terraform\nresource \"aws_cloudfront_distribution\" \"example\" {\n  # ... other configuration ...\n\n  # lambda_function_association is also supported by default_cache_behavior\n  ordered_cache_behavior {\n    # ... other configuration ...\n\n    lambda_function_association {\n      event_type   = \"viewer-request\"\n      lambda_arn   = aws_lambda_function.example.qualified_arn\n      include_body = false\n    }\n  }\n}\n```\n\n* `event_type` (Required) - Specific event to trigger this function. Valid values: `viewer-request`, `origin-request`, `viewer-response`, `origin-response`.\n* `lambda_arn` (Required) - ARN of the Lambda function.\n* `include_body` (Optional) - When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.\n\n##### Function Association\n\nWith CloudFront Functions in Amazon CloudFront, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations. You can associate a single function per event type. See [CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html)\nfor more information.\n\nExample configuration:\n\n```terraform\nresource \"aws_cloudfront_distribution\" \"example\" {\n  # ... other configuration ...\n\n  # function_association is also supported by default_cache_behavior\n  ordered_cache_behavior {\n    # ... other configuration ...\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.example.arn\n    }\n  }\n}\n```\n\n* `event_type` (Required) - Specific event to trigger this function. Valid values: `viewer-request` or `viewer-response`.\n* `function_arn` (Required) - ARN of the CloudFront function.\n\n##### Cookies Arguments\n\n* `forward` (Required) - Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify `all`, `none` or `whitelist`. If `whitelist`, you must include the subsequent `whitelisted_names`.\n* `whitelisted_names` (Optional) - If you have specified `whitelist` to `forward`, the whitelisted cookies that you want CloudFront to forward to your origin.\n\n#### Custom Error Response Arguments\n\n* `error_caching_min_ttl` (Optional) - Minimum amount of time you want HTTP error codes to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated.\n* `error_code` (Required) - 4xx or 5xx HTTP status code that you want to customize.\n* `response_code` (Optional) - HTTP status code that you want CloudFront to return with the custom error page to the viewer.\n* `response_page_path` (Optional) - Path of the custom error page (for example, `/custom_404.html`).\n\n#### Default Cache Behavior Arguments\n\nThe arguments for `default_cache_behavior` are the same as for\n[`ordered_cache_behavior`](#cache-behavior-arguments), except for the `path_pattern`\nargument should not be specified.\n\n#### Logging Config Arguments\n\n* `bucket` (Required) - Amazon S3 bucket to store the access logs in, for example, `myawslogbucket.s3.amazonaws.com`.\n* `include_cookies` (Optional) - Whether to include cookies in access logs (default: `false`).\n* `prefix` (Optional) - Prefix to the access log filenames for this distribution, for example, `myprefix/`.\n\n#### Origin Arguments\n\n* `connection_attempts` (Optional) - Number of times that CloudFront attempts to connect to the origin. Must be between 1-3. Defaults to 3.\n* `connection_timeout` (Optional) - Number of seconds that CloudFront waits when trying to establish a connection to the origin. Must be between 1-10. Defaults to 10.\n* `custom_origin_config` - The [CloudFront custom origin](#custom-origin-config-arguments) configuration information. If an S3 origin is required, use `origin_access_control_id` or `s3_origin_config` instead.\n* `domain_name` (Required) - DNS domain name of either the S3 bucket, or web site of your custom origin.\n* `custom_header` (Optional) - One or more sub-resources with `name` and `value` parameters that specify header data that will be sent to the origin (multiples allowed).\n* `origin_access_control_id` (Optional) - Unique identifier of a [CloudFront origin access control][8] for this origin.\n* `origin_id` (Required) - Unique identifier for the origin.\n* `origin_path` (Optional) - Optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.\n* `origin_shield` - (Optional) [CloudFront Origin Shield](#origin-shield-arguments) configuration information. Using Origin Shield can help reduce the load on your origin. For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.\n* `s3_origin_config` - (Optional) [CloudFront S3 origin](#s3-origin-config-arguments) configuration information. If a custom origin is required, use `custom_origin_config` instead.\n\n##### Custom Origin Config Arguments\n\n* `http_port` (Required) - HTTP port the custom origin listens on.\n* `https_port` (Required) - HTTPS port the custom origin listens on.\n* `origin_protocol_policy` (Required) - Origin protocol policy to apply to your origin. One of `http-only`, `https-only`, or `match-viewer`.\n* `origin_ssl_protocols` (Required) - SSL/TLS protocols that you want CloudFront to use when communicating with your origin over HTTPS. A list of one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.\n* `origin_keepalive_timeout` - (Optional) The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `5`.\n* `origin_read_timeout` - (Optional) The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `30`.\n\n##### Origin Shield Arguments\n\n* `enabled` (Required) - Whether Origin Shield is enabled.\n* `origin_shield_region` (Optional) - AWS Region for Origin Shield. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as `us-east-2`.\n\n##### S3 Origin Config Arguments\n\n* `origin_access_identity` (Required) - The [CloudFront origin access identity][5] to associate with the origin.\n\n#### Origin Group Arguments\n\n* `origin_id` (Required) - Unique identifier for the origin group.\n* `failover_criteria` (Required) - The [failover criteria](#failover-criteria-arguments) for when to failover to the secondary origin.\n* `member` (Required) - Ordered [member](#member-arguments) configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.\n\n##### Failover Criteria Arguments\n\n* `status_codes` (Required) - List of HTTP status codes for the origin group.\n\n##### Member Arguments\n\n* `origin_id` (Required) - Unique identifier of the member origin.\n\n#### Restrictions Arguments\n\nThe `restrictions` sub-resource takes another single sub-resource named `geo_restriction` (see the example for usage).\n\nThe arguments of `geo_restriction` are:\n\n* `locations` (Required) - [ISO 3166-1-alpha-2 codes][4] for which you want CloudFront either to distribute your content (`whitelist`) or not distribute your content (`blacklist`). If the type is specified as `none` an empty array can be used.\n* `restriction_type` (Required) - Method that you want to use to restrict distribution of your content by country: `none`, `whitelist`, or `blacklist`.\n\n#### Viewer Certificate Arguments\n\n* `acm_certificate_arn` - ARN of the [AWS Certificate Manager][6] certificate that you wish to use with this distribution. Specify this, `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM certificate must be in  US-EAST-1.\n* `cloudfront_default_certificate` - `true` if you want viewers to use HTTPS to request your objects and you're using the CloudFront domain name for your distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.\n* `iam_certificate_id` - IAM certificate identifier of the custom viewer certificate for this distribution if you are using a custom domain. Specify this, `acm_certificate_arn`, or `cloudfront_default_certificate`.\n* `minimum_protocol_version` - Minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. Can only be set if `cloudfront_default_certificate = false`. See all possible values in [this](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html) table under \"Security policy.\" Some examples include: `TLSv1.2_2019` and `TLSv1.2_2021`. Default: `TLSv1`. **NOTE**: If you are using a custom certificate (specified with `acm_certificate_arn` or `iam_certificate_id`), and have specified `sni-only` in `ssl_support_method`, `TLSv1` or later must be specified. If you have specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be specified. If you have specified `cloudfront_default_certificate`, `TLSv1` must be specified.\n* `ssl_support_method` - How you want CloudFront to serve HTTPS requests. One of `vip` or `sni-only`. Required if you specify `acm_certificate_arn` or `iam_certificate_id`. **NOTE:** `vip` causes CloudFront to use a dedicated IP address and may incur extra charges.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - Identifier for the distribution. For example: `EDFDVBD632BHDS5`.\n* `arn` - ARN for the distribution. For example: `arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5`, where `123456789012` is your AWS account ID.\n* `caller_reference` - Internal value used by CloudFront to allow future updates to the distribution configuration.\n* `status` - Current status of the distribution. `Deployed` if the distribution's information is fully propagated throughout the Amazon CloudFront system.\n* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n* `trusted_key_groups` - List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.\n    * `enabled` - `true` if any of the key groups have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies.\n    * `items` - List of nested attributes for each key group.\n        * `key_group_id` - ID of the key group that contains the public keys.\n        * `key_pair_ids` - Set of CloudFront key pair IDs.\n* `trusted_signers` - List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.\n    * `enabled` - `true` if any of the AWS accounts listed as trusted signers have active CloudFront key pairs\n    * `items` - List of nested attributes for each trusted signer\n        * `aws_account_number` - AWS account ID or `self`\n        * `key_pair_ids` - Set of active CloudFront key pairs associated with the signer account\n* `domain_name` - Domain name corresponding to the distribution. For example: `d604721fxaaqy9.cloudfront.net`.\n* `last_modified_time` - Date and time the distribution was last modified.\n* `in_progress_validation_batches` - Number of invalidation batches currently in progress.\n* `etag` - Current version of the distribution's information. For example: `E2QWRUHAPOMQZL`.\n* `hosted_zone_id` - CloudFront Route 53 zone ID that can be used to route an [Alias Resource Record Set][7] to. This attribute is simply an alias for the zone ID `Z2FDTNDATAQYW2`.\n\n[1]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html\n[2]: https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html\n[3]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html\n[4]: http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm\n[5]: /docs/providers/aws/r/cloudfront_origin_access_identity.html\n[6]: https://aws.amazon.com/certificate-manager/\n[7]: http://docs.aws.amazon.com/Route53/latest/APIReference/CreateAliasRRSAPI.html\n[8]: /docs/providers/aws/r/cloudfront_origin_access_control.html\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CloudFront Distributions using the `id`. For example:\n\n```terraform\nimport {\n  to = aws_cloudfront_distribution.distribution\n  id = \"E74FTE3EXAMPLE\"\n}\n```\n\nUsing `terraform import`, import CloudFront Distributions using the `id`. For example:\n\n```console\n% terraform import aws_cloudfront_distribution.distribution E74FTE3EXAMPLE\n```\n",
      "language": "hcl",
      "path": "website/docs/r/cloudfront_distribution.html.markdown",
      "slug": "cloudfront_distribution",
      "subcategory": "CloudFront",
      "title": "cloudfront_distribution",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3254903"
    }
  }
}