{
  "data": {
    "type": "provider-docs",
    "id": "3255690",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"VPC (Virtual Private Cloud)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_route_table\"\ndescription: |-\n  Provides a resource to create a VPC routing table.\n---\n\n# Resource: aws_route_table\n\nProvides a resource to create a VPC routing table.\n\n~> **NOTE on Route Tables and Routes:** Terraform currently\nprovides both a standalone [Route resource](route.html) and a Route Table resource with routes\ndefined in-line. At this time you cannot use a Route Table with in-line routes\nin conjunction with any Route resources. Doing so will cause\na conflict of rule settings and will overwrite rules.\n\n~> **NOTE on `gateway_id` and `nat_gateway_id`:** The AWS API is very forgiving with these two\nattributes and the `aws_route_table` resource can be created with a NAT ID specified as a Gateway ID attribute.\nThis _will_ lead to a permanent diff between your configuration and statefile, as the API returns the correct\nparameters in the returned route table. If you're experiencing constant diffs in your `aws_route_table` resources,\nthe first thing to check is whether or not you're specifying a NAT ID instead of a Gateway ID, or vice-versa.\n\n~> **NOTE on `propagating_vgws` and the `aws_vpn_gateway_route_propagation` resource:**\nIf the `propagating_vgws` argument is present, it's not supported to _also_\ndefine route propagations using `aws_vpn_gateway_route_propagation`, since\nthis resource will delete any propagating gateways not explicitly listed in\n`propagating_vgws`. Omit this argument when defining route propagation using\nthe separate resource.\n\n## Example Usage\n\n### Basic example\n\n```terraform\nresource \"aws_route_table\" \"example\" {\n  vpc_id = aws_vpc.example.id\n\n  route {\n    cidr_block = \"10.0.1.0/24\"\n    gateway_id = aws_internet_gateway.example.id\n  }\n\n  route {\n    ipv6_cidr_block        = \"::/0\"\n    egress_only_gateway_id = aws_egress_only_internet_gateway.example.id\n  }\n\n  tags = {\n    Name = \"example\"\n  }\n}\n```\n\nTo subsequently remove all managed routes:\n\n```terraform\nresource \"aws_route_table\" \"example\" {\n  vpc_id = aws_vpc.example.id\n\n  route = []\n\n  tags = {\n    Name = \"example\"\n  }\n}\n```\n\n### Adopting an existing local route\n\nAWS creates certain routes that the AWS provider mostly ignores. You can manage them by importing or adopting them. See [Import](#import) below for information on importing. This example shows adopting a route and then updating its target.\n\nFirst, adopt an existing AWS-created route:\n\n```terraform\nresource \"aws_vpc\" \"test\" {\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_route_table\" \"test\" {\n  vpc_id = aws_vpc.test.id\n\n  # since this is exactly the route AWS will create, the route will be adopted\n  route {\n    cidr_block = \"10.1.0.0/16\"\n    gateway_id = \"local\"\n  }\n}\n```\n\nNext, update the target of the route:\n\n```terraform\nresource \"aws_vpc\" \"test\" {\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_route_table\" \"test\" {\n  vpc_id = aws_vpc.test.id\n\n  route {\n    cidr_block           = aws_vpc.test.cidr_block\n    network_interface_id = aws_network_interface.test.id\n  }\n}\n\nresource \"aws_subnet\" \"test\" {\n  cidr_block = \"10.1.1.0/24\"\n  vpc_id     = aws_vpc.test.id\n}\n\nresource \"aws_network_interface\" \"test\" {\n  subnet_id = aws_subnet.test.id\n}\n```\n\nThe target could then be updated again back to `local`.\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `vpc_id` - (Required) The VPC ID.\n* `route` - (Optional) A list of route objects. Their keys are documented below. This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).\nThis means that omitting this argument is interpreted as ignoring any existing routes. To remove all managed routes an empty list should be specified. See the example above.\n* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n* `propagating_vgws` - (Optional) A list of virtual gateways for propagation.\n\n### route Argument Reference\n\nThis argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).\n\nOne of the following destination arguments must be supplied:\n\n* `cidr_block` - (Required) The CIDR block of the route.\n* `ipv6_cidr_block` - (Optional) The Ipv6 CIDR block of the route.\n* `destination_prefix_list_id` - (Optional) The ID of a [managed prefix list](ec2_managed_prefix_list.html) destination of the route.\n\nOne of the following target arguments must be supplied:\n\n* `carrier_gateway_id` - (Optional) Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.\n* `core_network_arn` - (Optional) The Amazon Resource Name (ARN) of a core network.\n* `egress_only_gateway_id` - (Optional) Identifier of a VPC Egress Only Internet Gateway.\n* `gateway_id` - (Optional) Identifier of a VPC internet gateway, virtual private gateway, or `local`. `local` routes cannot be created but can be adopted or imported. See the [example](#adopting-an-existing-local-route) above.\n* `local_gateway_id` - (Optional) Identifier of a Outpost local gateway.\n* `nat_gateway_id` - (Optional) Identifier of a VPC NAT gateway.\n* `network_interface_id` - (Optional) Identifier of an EC2 network interface.\n* `transit_gateway_id` - (Optional) Identifier of an EC2 Transit Gateway.\n* `vpc_endpoint_id` - (Optional) Identifier of a VPC Endpoint.\n* `vpc_peering_connection_id` - (Optional) Identifier of a VPC peering connection.\n\nNote that the default route, mapping the VPC's CIDR block to \"local\", is created implicitly and cannot be specified.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n~> **NOTE:** Only the target that is entered is exported as a readable\nattribute once the route resource is created.\n\n* `id` - The ID of the routing table.\n* `arn` - The ARN of the route table.\n* `owner_id` - The ID of the AWS account that owns the route table.\n* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n\n## Timeouts\n\n[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):\n\n- `create` - (Default `5m`)\n- `update` - (Default `2m`)\n- `delete` - (Default `5m`)\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route Tables using the route table `id`. For example:\n\n```terraform\nimport {\n  to = aws_route_table.public_rt\n  id = \"rtb-4e616f6d69\"\n}\n```\n\nUsing `terraform import`, import Route Tables using the route table `id`. For example:\n\n```console\n% terraform import aws_route_table.public_rt rtb-4e616f6d69\n```\n",
      "language": "hcl",
      "path": "website/docs/r/route_table.html.markdown",
      "slug": "route_table",
      "subcategory": "VPC (Virtual Private Cloud)",
      "title": "route_table",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3255690"
    }
  }
}