{
  "data": {
    "type": "provider-docs",
    "id": "3254758",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"API Gateway\"\nlayout: \"aws\"\npage_title: \"AWS: aws_api_gateway_authorizer\"\ndescription: |-\n  Provides an API Gateway Authorizer.\n---\n\n# Resource: aws_api_gateway_authorizer\n\nProvides an API Gateway Authorizer.\n\n## Example Usage\n\n```terraform\nresource \"aws_api_gateway_authorizer\" \"demo\" {\n  name                   = \"demo\"\n  rest_api_id            = aws_api_gateway_rest_api.demo.id\n  authorizer_uri         = aws_lambda_function.authorizer.invoke_arn\n  authorizer_credentials = aws_iam_role.invocation_role.arn\n}\n\nresource \"aws_api_gateway_rest_api\" \"demo\" {\n  name = \"auth-demo\"\n}\n\ndata \"aws_iam_policy_document\" \"invocation_assume_role\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"apigateway.amazonaws.com\"]\n    }\n\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\nresource \"aws_iam_role\" \"invocation_role\" {\n  name               = \"api_gateway_auth_invocation\"\n  path               = \"/\"\n  assume_role_policy = data.aws_iam_policy_document.invocation_assume_role.json\n}\n\ndata \"aws_iam_policy_document\" \"invocation_policy\" {\n  statement {\n    effect    = \"Allow\"\n    actions   = [\"lambda:InvokeFunction\"]\n    resources = [aws_lambda_function.authorizer.arn]\n  }\n}\n\nresource \"aws_iam_role_policy\" \"invocation_policy\" {\n  name   = \"default\"\n  role   = aws_iam_role.invocation_role.id\n  policy = data.aws_iam_policy_document.invocation_policy.json\n}\n\ndata \"aws_iam_policy_document\" \"lambda_assume_role\" {\n  statement {\n    effect  = \"Allow\"\n    actions = [\"sts:AssumeRole\"]\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"lambda.amazonaws.com\"]\n    }\n  }\n}\n\nresource \"aws_iam_role\" \"lambda\" {\n  name               = \"demo-lambda\"\n  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role.json\n}\n\nresource \"aws_lambda_function\" \"authorizer\" {\n  filename      = \"lambda-function.zip\"\n  function_name = \"api_gateway_authorizer\"\n  role          = aws_iam_role.lambda.arn\n  handler       = \"exports.example\"\n\n  source_code_hash = filebase64sha256(\"lambda-function.zip\")\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `authorizer_uri` - (Optional, required for type `TOKEN`/`REQUEST`) Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of `arn:aws:apigateway:{region}:lambda:path/{service_api}`,\n e.g., `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations`\n* `name` - (Required) Name of the authorizer\n* `rest_api_id` - (Required) ID of the associated REST API\n* `identity_source` - (Optional) Source of the identity in an incoming request. Defaults to `method.request.header.Authorization`. For `REQUEST` type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., `\"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName\"`\n* `type` - (Optional) Type of the authorizer. Possible values are `TOKEN` for a Lambda function using a single authorization token submitted in a custom header, `REQUEST` for a Lambda function using incoming request parameters, or `COGNITO_USER_POOLS` for using an Amazon Cognito user pool. Defaults to `TOKEN`.\n* `authorizer_credentials` - (Optional) Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.\n* `authorizer_result_ttl_in_seconds` - (Optional) TTL of cached authorizer results in seconds. Defaults to `300`.\n* `identity_validation_expression` - (Optional) Validation expression for the incoming identity. For `TOKEN` type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.\n* `provider_arns` - (Optional, required for type `COGNITO_USER_POOLS`) List of the Amazon Cognito user pool ARNs. Each element is of this format: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - ARN of the API Gateway Authorizer\n* `id` - Authorizer identifier.\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS API Gateway Authorizer using the `REST-API-ID/AUTHORIZER-ID`. For example:\n\n```terraform\nimport {\n  to = aws_api_gateway_authorizer.authorizer\n  id = \"12345abcde/example\"\n}\n```\n\nUsing `terraform import`, import AWS API Gateway Authorizer using the `REST-API-ID/AUTHORIZER-ID`. For example:\n\n```console\n% terraform import aws_api_gateway_authorizer.authorizer 12345abcde/example\n```\n",
      "language": "hcl",
      "path": "website/docs/r/api_gateway_authorizer.html.markdown",
      "slug": "api_gateway_authorizer",
      "subcategory": "API Gateway",
      "title": "api_gateway_authorizer",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3254758"
    }
  }
}