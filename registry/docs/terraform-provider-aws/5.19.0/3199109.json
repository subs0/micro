{
  "data": {
    "type": "provider-docs",
    "id": "3199109",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"VPC Lattice\"\nlayout: \"aws\"\npage_title: \"AWS: aws_vpclattice_target_group\"\ndescription: |-\n  Terraform resource for managing an AWS VPC Lattice Target Group.\n---\n\n# Resource: aws_vpclattice_target_group\n\nTerraform resource for managing an AWS VPC Lattice Target Group.\n\n## Example Usage\n\n### Basic Usage\n\n```terraform\nresource \"aws_vpclattice_target_group\" \"example\" {\n  name = \"example\"\n  type = \"INSTANCE\"\n\n  config {\n    vpc_identifier = aws_vpc.example.id\n\n    port     = 443\n    protocol = \"HTTPS\"\n  }\n}\n```\n\n### Basic usage with Health check\n\n```terraform\nresource \"aws_vpclattice_target_group\" \"example\" {\n  name = \"example\"\n  type = \"IP\"\n\n  config {\n    vpc_identifier = aws_vpc.example.id\n\n    ip_address_type  = \"IPV4\"\n    port             = 443\n    protocol         = \"HTTPS\"\n    protocol_version = \"HTTP1\"\n\n    health_check {\n      enabled                       = true\n      health_check_interval_seconds = 20\n      health_check_timeout_seconds  = 10\n      healthy_threshold_count       = 7\n      unhealthy_threshold_count     = 3\n\n      matcher {\n        value = \"200-299\"\n      }\n\n      path             = \"/instance\"\n      port             = 80\n      protocol         = \"HTTP\"\n      protocol_version = \"HTTP1\"\n    }\n  }\n}\n```\n\n### ALB\n\nIf the type is ALB, `health_check` block is not supported.\n\n```terraform\nresource \"aws_vpclattice_target_group\" \"example\" {\n  name = \"example\"\n  type = \"ALB\"\n\n  config {\n    vpc_identifier = aws_vpc.example.id\n\n    port             = 443\n    protocol         = \"HTTPS\"\n    protocol_version = \"HTTP1\"\n  }\n}\n```\n\n### Lambda\n\nIf the type is Lambda, `config` block is not supported.\n\n```terraform\nresource \"aws_vpclattice_target_group\" \"example\" {\n  name = \"example\"\n  type = \"LAMBDA\"\n}\n```\n\n## Argument Reference\n\nThe following arguments are required:\n\n* `name` - (Required) The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.\n* `type` - (Required) The type of target group. Valid Values are `IP` | `LAMBDA` | `INSTANCE` | `ALB`\n\nThe following arguments are optional:\n\n* `config` - (Optional) The target group configuration. If type is set to `LAMBDA,` this parameter should not be specified.\n* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n\nConfig (`config`) supports the following:\n\n* `health_check` - (Optional) The health check configuration.\n* `ip_address_type` - (Optional) The type of IP address used for the target group. Valid values: `IPV4` | `IPV6`\n* `port` - (Required) The port on which the targets are listening.\n* `protocol` - (Required) The protocol to use for routing traffic to the targets. Valid Values are `HTTP` | `HTTPS`\n* `protocol_version` - (Optional) The protocol version. Valid Values are `HTTP1` | `HTTP2` | `GRPC`. Default value is `HTTP1`.\n* `vpc_identifier` - (Required) The ID of the VPC.\n\nHealth Check (`health_check`) supports the following:\n\n* `enabled` - (Optional) Indicates whether health checking is enabled. Defaults to `true`.\n* `health_check_interval_seconds` - (Optional) The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.\n* `health_check_timeout_seconds` - (Optional) The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.\n* `healthy_threshold_count ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.\n* `matcher` - (Optional) The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.\n    * `value` - (Optional) The HTTP codes to use when checking for a successful response from a target.\n* `path` - (Optional) The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.\n* `port` - (Optional) The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.\n* `protocol` - (Optional) The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.\n* `protocol_version` - (Optional) The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.\n* `unhealthy_threshold_count` - (Optional) The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - ARN of the target group.\n* `id` - Unique identifier for the target group.\n* `status` - Status of the target group.\n* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).\n\n## Timeouts\n\n[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):\n\n* `create` - (Default `5m`)\n* `delete` - (Default `5m`)\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Lattice Target Group using the `id`. For example:\n\n```terraform\nimport {\n  to = aws_vpclattice_target_group.example\n  id = \"tg-0c11d4dc16ed96bdb\"\n}\n```\n\nUsing `terraform import`, import VPC Lattice Target Group using the `id`. For example:\n\n```console\n% terraform import aws_vpclattice_target_group.example tg-0c11d4dc16ed96bdb\n```\n",
      "language": "hcl",
      "path": "website/docs/r/vpclattice_target_group.html.markdown",
      "slug": "vpclattice_target_group",
      "subcategory": "VPC Lattice",
      "title": "vpclattice_target_group",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3199109"
    }
  }
}