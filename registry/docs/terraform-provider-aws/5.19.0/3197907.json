{
  "data": {
    "type": "provider-docs",
    "id": "3197907",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"ACM (Certificate Manager)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_acm_certificate\"\ndescription: |-\n  Requests and manages a certificate from Amazon Certificate Manager (ACM).\n---\n\n# Resource: aws_acm_certificate\n\nThe ACM certificate resource allows requesting and management of certificates\nfrom the Amazon Certificate Manager.\n\nACM certificates can be created in three ways:\nAmazon-issued, where AWS provides the certificate authority and automatically manages renewal;\nimported certificates, issued by another certificate authority;\nand private certificates, issued using an ACM Private Certificate Authority.\n\n## Amazon-Issued Certificates\n\nFor Amazon-issued certificates, this resource deals with requesting certificates and managing their attributes and life-cycle.\nThis resource does not deal with validation of a certificate but can provide inputs\nfor other resources implementing the validation.\nIt does not wait for a certificate to be issued.\nUse a [`aws_acm_certificate_validation`](acm_certificate_validation.html) resource for this.\n\nMost commonly, this resource is used together with [`aws_route53_record`](route53_record.html) and\n[`aws_acm_certificate_validation`](acm_certificate_validation.html) to request a DNS validated certificate,\ndeploy the required validation records and wait for validation to complete.\n\nDomain validation through email is also supported but should be avoided as it requires a manual step outside of Terraform.\n\nIt's recommended to specify `create_before_destroy = true` in a [lifecycle][1] block to replace a certificate\nwhich is currently in use (eg, by [`aws_lb_listener`](lb_listener.html)).\n\n## Certificates Imported from Other Certificate Authority\n\nImported certificates can be used to make certificates created with an external certificate authority available for AWS services.\n\nAs they are not managed by AWS, imported certificates are not eligible for automatic renewal.\nNew certificate materials can be supplied to an existing imported certificate to update it in place.\n\n## Private Certificates\n\nPrivate certificates are issued by an ACM Private Cerificate Authority, which can be created using the resource type [`aws_acmpca_certificate_authority`](acmpca_certificate_authority.html).\n\nPrivate certificates created using this resource are eligible for managed renewal if they have been exported or associated with another AWS service.\nSee [managed renewal documentation](https://docs.aws.amazon.com/acm/latest/userguide/managed-renewal.html) for more information.\nBy default, a certificate is valid for 395 days and the managed renewal process will start 60 days before expiration.\nTo renew the certificate earlier than 60 days before expiration, configure `early_renewal_duration`.\n\n## Example Usage\n\n### Create Certificate\n\n```terraform\nresource \"aws_acm_certificate\" \"cert\" {\n  domain_name       = \"example.com\"\n  validation_method = \"DNS\"\n\n  tags = {\n    Environment = \"test\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```\n\n### Custom Domain Validation Options\n\n```terraform\nresource \"aws_acm_certificate\" \"cert\" {\n  domain_name       = \"testing.example.com\"\n  validation_method = \"EMAIL\"\n\n  validation_option {\n    domain_name       = \"testing.example.com\"\n    validation_domain = \"example.com\"\n  }\n}\n```\n\n### Existing Certificate Body Import\n\n```terraform\nresource \"tls_private_key\" \"example\" {\n  algorithm = \"RSA\"\n}\n\nresource \"tls_self_signed_cert\" \"example\" {\n  key_algorithm   = \"RSA\"\n  private_key_pem = tls_private_key.example.private_key_pem\n\n  subject {\n    common_name  = \"example.com\"\n    organization = \"ACME Examples, Inc\"\n  }\n\n  validity_period_hours = 12\n\n  allowed_uses = [\n    \"key_encipherment\",\n    \"digital_signature\",\n    \"server_auth\",\n  ]\n}\n\nresource \"aws_acm_certificate\" \"cert\" {\n  private_key      = tls_private_key.example.private_key_pem\n  certificate_body = tls_self_signed_cert.example.cert_pem\n}\n```\n\n### Referencing domain_validation_options With for_each Based Resources\n\nSee the [`aws_acm_certificate_validation` resource](acm_certificate_validation.html) for a full example of performing DNS validation.\n\n```terraform\nresource \"aws_route53_record\" \"example\" {\n  for_each = {\n    for dvo in aws_acm_certificate.example.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = aws_route53_zone.example.zone_id\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* Creating an Amazon issued certificate\n    * `domain_name` - (Required) Domain name for which the certificate should be issued\n    * `subject_alternative_names` - (Optional) Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`) or use the [`terraform taint` command](https://www.terraform.io/docs/commands/taint.html) to trigger recreation.\n    * `validation_method` - (Optional) Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Terraform.\n    * `key_algorithm` - (Optional) Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.\n    * `options` - (Optional) Configuration block used to set certificate options. Detailed below.\n    * `validation_option` - (Optional) Configuration block used to specify information about the initial validation of each domain name. Detailed below.\n* Importing an existing certificate\n    * `private_key` - (Required) Certificate's PEM-formatted private key\n    * `certificate_body` - (Required) Certificate's PEM-formatted public key\n    * `certificate_chain` - (Optional) Certificate's PEM-formatted chain\n* Creating a private CA issued certificate\n    * `certificate_authority_arn` - (Required) ARN of an ACM PCA\n    * `domain_name` - (Required) Domain name for which the certificate should be issued.\n    * `early_renewal_duration` - (Optional) Amount of time to start automatic renewal process before expiration.\n      Has no effect if less than 60 days.\n      Represented by either\n      a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),\n      or a string such as `2160h`.\n* `subject_alternative_names` - (Optional) Set of domains that should be SANs in the issued certificate.\n  To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)\n  or use the [`terraform taint` command](https://www.terraform.io/docs/commands/taint.html) to trigger recreation.\n* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n\n## options Configuration Block\n\nSupported nested arguments for the `options` configuration block:\n\n* `certificate_transparency_logging_preference` - (Optional) Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.\n\n## validation_option Configuration Block\n\nSupported nested arguments for the `validation_option` configuration block:\n\n* `domain_name` - (Required) Fully qualified domain name (FQDN) in the certificate.\n* `validation_domain` - (Required) Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domain_name` value or a superdomain of the `domain_name` value. For example, if you request a certificate for `\"testing.example.com\"`, you can specify `\"example.com\"` for this value.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - ARN of the certificate\n* `arn` - ARN of the certificate\n* `domain_name` - Domain name for which the certificate is issued\n* `domain_validation_options` - Set of domain validation objects which can be used to complete certificate validation.\n  Can have more than one element, e.g., if SANs are defined.\n  Only set if `DNS`-validation was used.\n* `not_after` - Expiration date and time of the certificate.\n* `not_before` - Start of the validity period of the certificate.\n* `pending_renewal` - `true` if a Private certificate eligible for managed renewal is within the `early_renewal_duration` period.\n* `renewal_eligibility` - Whether the certificate is eligible for managed renewal.\n* `renewal_summary` - Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.\n* `status` - Status of the certificate.\n* `type` - Source of the certificate.\n* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n* `validation_emails` - List of addresses that received a validation email. Only set if `EMAIL` validation was used.\n\nDomain validation objects export the following attributes:\n\n* `domain_name` - Domain to be validated\n* `resource_record_name` - The name of the DNS record to create to validate the certificate\n* `resource_record_type` - The type of DNS record to create\n* `resource_record_value` - The value the DNS record needs to have\n\nRenewal summary objects export the following attributes:\n\n* `renewal_status` - The status of ACM's managed renewal of the certificate\n* `renewal_status_reason` - The reason that a renewal request was unsuccessful or is pending\n\n[1]: https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import certificates using their ARN. For example:\n\n```terraform\nimport {\n  to = aws_acm_certificate.cert\n  id = \"arn:aws:acm:eu-central-1:123456789012:certificate/7e7a28d2-163f-4b8f-b9cd-822f96c08d6a\"\n}\n```\n\nUsing `terraform import`, import certificates using their ARN. For example:\n\n```console\n% terraform import aws_acm_certificate.cert arn:aws:acm:eu-central-1:123456789012:certificate/7e7a28d2-163f-4b8f-b9cd-822f96c08d6a\n```\n",
      "language": "hcl",
      "path": "website/docs/r/acm_certificate.html.markdown",
      "slug": "acm_certificate",
      "subcategory": "ACM (Certificate Manager)",
      "title": "acm_certificate",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3197907"
    }
  }
}