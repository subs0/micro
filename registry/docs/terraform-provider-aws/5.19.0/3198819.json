{
  "data": {
    "type": "provider-docs",
    "id": "3198819",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"VPC (Virtual Private Cloud)\"\nlayout: \"aws\"\npage_title: \"AWS: aws_route\"\ndescription: |-\n  Provides a resource to create a routing entry in a VPC routing table.\n---\n\n# Resource: aws_route\n\nProvides a resource to create a routing table entry (a route) in a VPC routing table.\n\n~> **NOTE on Route Tables and Routes:** Terraform currently provides both a standalone Route resource and a [Route Table](route_table.html) resource with routes defined in-line. At this time you cannot use a Route Table with in-line routes in conjunction with any Route resources. Doing so will cause a conflict of rule settings and will overwrite rules.\n\n~> **NOTE on `gateway_id` attribute:** The AWS API is very forgiving with the resource ID passed in the `gateway_id` attribute. For example an `aws_route` resource can be created with an [`aws_nat_gateway`](nat_gateway.html) or [`aws_egress_only_internet_gateway`](egress_only_internet_gateway.html) ID specified for the `gateway_id` attribute. Specifying anything other than an [`aws_internet_gateway`](internet_gateway.html) or [`aws_vpn_gateway`](vpn_gateway.html) ID will lead to Terraform reporting a permanent diff between your configuration and recorded state, as the AWS API returns the more-specific attribute. If you are experiencing constant diffs with an `aws_route` resource, the first thing to check is that the correct attribute is being specified.\n\n## Example Usage\n\n```terraform\nresource \"aws_route\" \"r\" {\n  route_table_id            = \"rtb-4fbb3ac4\"\n  destination_cidr_block    = \"10.0.1.0/22\"\n  vpc_peering_connection_id = \"pcx-45ff3dc1\"\n  depends_on                = [aws_route_table.testing]\n}\n```\n\n## Example IPv6 Usage\n\n```terraform\nresource \"aws_vpc\" \"vpc\" {\n  cidr_block                       = \"10.1.0.0/16\"\n  assign_generated_ipv6_cidr_block = true\n}\n\nresource \"aws_egress_only_internet_gateway\" \"egress\" {\n  vpc_id = aws_vpc.vpc.id\n}\n\nresource \"aws_route\" \"r\" {\n  route_table_id              = \"rtb-4fbb3ac4\"\n  destination_ipv6_cidr_block = \"::/0\"\n  egress_only_gateway_id      = aws_egress_only_internet_gateway.egress.id\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `route_table_id` - (Required) The ID of the routing table.\n\nOne of the following destination arguments must be supplied:\n\n* `destination_cidr_block` - (Optional) The destination CIDR block.\n* `destination_ipv6_cidr_block` - (Optional) The destination IPv6 CIDR block.\n* `destination_prefix_list_id` - (Optional) The ID of a [managed prefix list](ec2_managed_prefix_list.html) destination.\n\nOne of the following target arguments must be supplied:\n\n* `carrier_gateway_id` - (Optional) Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.\n* `core_network_arn` - (Optional) The Amazon Resource Name (ARN) of a core network.\n* `egress_only_gateway_id` - (Optional) Identifier of a VPC Egress Only Internet Gateway.\n* `gateway_id` - (Optional) Identifier of a VPC internet gateway or a virtual private gateway. Specify `local` when updating a previously [imported](#import) local route.\n* `nat_gateway_id` - (Optional) Identifier of a VPC NAT gateway.\n* `local_gateway_id` - (Optional) Identifier of a Outpost local gateway.\n* `network_interface_id` - (Optional) Identifier of an EC2 network interface.\n* `transit_gateway_id` - (Optional) Identifier of an EC2 Transit Gateway.\n* `vpc_endpoint_id` - (Optional) Identifier of a VPC Endpoint.\n* `vpc_peering_connection_id` - (Optional) Identifier of a VPC peering connection.\n\nNote that the default route, mapping the VPC's CIDR block to \"local\", is created implicitly and cannot be specified.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n~> **NOTE:** Only the arguments that are configured (one of the above) will be exported as an attribute once the resource is created.\n\n* `id` - Route identifier computed from the routing table identifier and route destination.\n* `instance_id` - Identifier of an EC2 instance.\n* `instance_owner_id` - The AWS account ID of the owner of the EC2 instance.\n* `origin` - How the route was created - `CreateRouteTable`, `CreateRoute` or `EnableVgwRoutePropagation`.\n* `state` - The state of the route - `active` or `blackhole`.\n\n## Timeouts\n\n[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):\n\n- `create` - (Default `5m`)\n- `update` - (Default `2m`)\n- `delete` - (Default `5m`)\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import individual routes using `ROUTETABLEID_DESTINATION`. Import [local routes](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#RouteTables) using the VPC's IPv4 or IPv6 CIDR blocks. For example:\n\nImport a route in route table `rtb-656C65616E6F72` with an IPv4 destination CIDR of `10.42.0.0/16`:\n\n```terraform\nimport {\n  to = aws_route.my_route\n  id = \"rtb-656C65616E6F72_10.42.0.0/16\"\n}\n```\n\nImport a route in route table `rtb-656C65616E6F72` with an IPv6 destination CIDR of `2620:0:2d0:200::8/125`:\n\n```terraform\nimport {\n  to = aws_route.my_route\n  id = \"rtb-656C65616E6F72_2620:0:2d0:200::8/125\"\n}\n```\n\nImport a route in route table `rtb-656C65616E6F72` with a managed prefix list destination of `pl-0570a1d2d725c16be`:\n\n```terraform\nimport {\n  to = aws_route.my_route\n  id = \"rtb-656C65616E6F72_pl-0570a1d2d725c16be\"\n}\n```\n\n**Using `terraform import` to import** individual routes using `ROUTETABLEID_DESTINATION`. Import [local routes](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#RouteTables) using the VPC's IPv4 or IPv6 CIDR blocks. For example:\n\nImport a route in route table `rtb-656C65616E6F72` with an IPv4 destination CIDR of `10.42.0.0/16`:\n\n```console\n% terraform import aws_route.my_route rtb-656C65616E6F72_10.42.0.0/16\n```\n\nImport a route in route table `rtb-656C65616E6F72` with an IPv6 destination CIDR of `2620:0:2d0:200::8/125`:\n\n```console\n% terraform import aws_route.my_route rtb-656C65616E6F72_2620:0:2d0:200::8/125\n```\n\nImport a route in route table `rtb-656C65616E6F72` with a managed prefix list destination of `pl-0570a1d2d725c16be`:\n\n```console\n% terraform import aws_route.my_route rtb-656C65616E6F72_pl-0570a1d2d725c16be\n```\n",
      "language": "hcl",
      "path": "website/docs/r/route.html.markdown",
      "slug": "route",
      "subcategory": "VPC (Virtual Private Cloud)",
      "title": "route",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198819"
    }
  }
}