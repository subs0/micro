{
  "data": {
    "type": "provider-docs",
    "id": "3197979",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"App Mesh\"\nlayout: \"aws\"\npage_title: \"AWS: aws_appmesh_virtual_gateway\"\ndescription: |-\n  Provides an AWS App Mesh virtual gateway resource.\n---\n\n# Resource: aws_appmesh_virtual_gateway\n\nProvides an AWS App Mesh virtual gateway resource.\n\n## Example Usage\n\n### Basic\n\n```terraform\nresource \"aws_appmesh_virtual_gateway\" \"example\" {\n  name      = \"example-virtual-gateway\"\n  mesh_name = \"example-service-mesh\"\n\n  spec {\n    listener {\n      port_mapping {\n        port     = 8080\n        protocol = \"http\"\n      }\n    }\n  }\n\n  tags = {\n    Environment = \"test\"\n  }\n}\n```\n\n### Access Logs and TLS\n\n```terraform\nresource \"aws_appmesh_virtual_gateway\" \"example\" {\n  name      = \"example-virtual-gateway\"\n  mesh_name = \"example-service-mesh\"\n\n  spec {\n    listener {\n      port_mapping {\n        port     = 8080\n        protocol = \"http\"\n      }\n\n      tls {\n        certificate {\n          acm {\n            certificate_arn = aws_acm_certificate.example.arn\n          }\n        }\n\n        mode = \"STRICT\"\n      }\n    }\n\n    logging {\n      access_log {\n        file {\n          path = \"/var/log/access.log\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Argument Reference\n\nThis resource supports the following arguments:\n\n* `name` - (Required) Name to use for the virtual gateway. Must be between 1 and 255 characters in length.\n* `mesh_name` - (Required) Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.\n* `mesh_owner` - (Optional) AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider][1] is currently connected to.\n* `spec` - (Required) Virtual gateway specification to apply.\n* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.\n\nThe `spec` object supports the following:\n\n* `listener` - (Required) Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.\n* `backend_defaults` - (Optional) Defaults for backends.\n* `logging` - (Optional) Inbound and outbound access logging information for the virtual gateway.\n\nThe `backend_defaults` object supports the following:\n\n* `client_policy` - (Optional) Default client policy for virtual gateway backends.\n\nThe `client_policy` object supports the following:\n\n* `tls` - (Optional) Transport Layer Security (TLS) client policy.\n\nThe `tls` object supports the following:\n\n* `certificate` (Optional) Virtual gateway's client's Transport Layer Security (TLS) certificate.\n* `enforce` - (Optional) Whether the policy is enforced. Default is `true`.\n* `ports` - (Optional) One or more ports that the policy is enforced for.\n* `validation` - (Required) TLS validation context.\n\nThe `certificate` object supports the following:\n\n* `file` - (Optional) Local file certificate.\n* `sds` - (Optional) A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.\n\nThe `file` object supports the following:\n\n* `certificate_chain` - (Required) Certificate chain for the certificate.\n* `private_key` - (Required) Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.\n\nThe `sds` object supports the following:\n\n* `secret_name` - (Required) Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.\n\nThe `validation` object supports the following:\n\n* `subject_alternative_names` - (Optional) SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.\n* `trust` - (Required) TLS validation context trust.\n\nThe `subject_alternative_names` object supports the following:\n\n* `match` - (Required) Criteria for determining a SAN's match.\n\nThe `match` object supports the following:\n\n* `exact` - (Required) Values sent must match the specified values exactly.\n\nThe `trust` object supports the following:\n\n* `acm` - (Optional) TLS validation context trust for an AWS Certificate Manager (ACM) certificate.\n* `file` - (Optional) TLS validation context trust for a local file certificate.\n* `sds` - (Optional) TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.\n\nThe `acm` object supports the following:\n\n* `certificate_authority_arns` - (Required) One or more ACM ARNs.\n\nThe `file` object supports the following:\n\n* `certificate_chain` - (Required) Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.\n\nThe `sds` object supports the following:\n\n* `secret_name` - (Required) Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.\n\nThe `listener` object supports the following:\n\n* `port_mapping` - (Required) Port mapping information for the listener.\n* `connection_pool` - (Optional) Connection pool information for the listener.\n* `health_check` - (Optional) Health check information for the listener.\n* `tls` - (Optional) Transport Layer Security (TLS) properties for the listener\n\nThe `logging` object supports the following:\n\n* `access_log` - (Optional) Access log configuration for a virtual gateway.\n\nThe `access_log` object supports the following:\n\n* `file` - (Optional) File object to send virtual gateway access logs to.\n\nThe `file` object supports the following:\n\n* `format` - (Optional) The specified format for the logs.\n* `path` - (Required) File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.\n\nThe `format` object supports the following:\n\n* `json` - (Optional) The logging format for JSON.\n* `text` - (Optional) The logging format for text. Must be between 1 and 1000 characters in length.\n\nThe `json` object supports the following:\n\n* `key` - (Required) The specified key for the JSON. Must be between 1 and 100 characters in length.\n* `value` - (Required) The specified value for the JSON. Must be between 1 and 100 characters in length.\n\nThe `port_mapping` object supports the following:\n\n* `port` - (Required) Port used for the port mapping.\n* `protocol` - (Required) Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.\n\nThe `connection_pool` object supports the following:\n\n* `grpc` - (Optional) Connection pool information for gRPC listeners.\n* `http` - (Optional) Connection pool information for HTTP listeners.\n* `http2` - (Optional) Connection pool information for HTTP2 listeners.\n\nThe `grpc` connection pool object supports the following:\n\n* `max_requests` - (Required) Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.\n\nThe `http` connection pool object supports the following:\n\n* `max_connections` - (Required) Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.\n* `max_pending_requests` - (Optional) Number of overflowing requests after `max_connections` Envoy will queue to upstream cluster. Minimum value of `1`.\n\nThe `http2` connection pool object supports the following:\n\n* `max_requests` - (Required) Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.\n\nThe `health_check` object supports the following:\n\n* `healthy_threshold` - (Required) Number of consecutive successful health checks that must occur before declaring listener healthy.\n* `interval_millis`- (Required) Time period in milliseconds between each health check execution.\n* `protocol` - (Required) Protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.\n* `timeout_millis` - (Required) Amount of time to wait when receiving a response from the health check, in milliseconds.\n* `unhealthy_threshold` - (Required) Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.\n* `path` - (Optional) Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.\n* `port` - (Optional) Destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.\n\nThe `tls` object supports the following:\n\n* `certificate` - (Required) Listener's TLS certificate.\n* `mode`- (Required) Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.\n* `validation`- (Optional) Listener's Transport Layer Security (TLS) validation context.\n\nThe `certificate` object supports the following:\n\n* `acm` - (Optional) An AWS Certificate Manager (ACM) certificate.\n* `file` - (Optional) Local file certificate.\n* `sds` - (Optional) A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.\n\nThe `acm` object supports the following:\n\n* `certificate_arn` - (Required) ARN for the certificate.\n\nThe `file` object supports the following:\n\n* `certificate_chain` - (Required) Certificate chain for the certificate. Must be between 1 and 255 characters in length.\n* `private_key` - (Required) Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.\n\nThe `sds` object supports the following:\n\n* `secret_name` - (Required) Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.\n\nThe `validation` object supports the following:\n\n* `subject_alternative_names` - (Optional) SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.\n* `trust` - (Required) TLS validation context trust.\n\nThe `subject_alternative_names` object supports the following:\n\n* `match` - (Required) Criteria for determining a SAN's match.\n\nThe `match` object supports the following:\n\n* `exact` - (Required) Values sent must match the specified values exactly.\n\nThe `trust` object supports the following:\n\n* `file` - (Optional) TLS validation context trust for a local file certificate.\n* `sds` - (Optional) TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.\n\nThe `file` object supports the following:\n\n* `certificate_chain` - (Required) Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.\n\nThe `sds` object supports the following:\n\n* `secret_name` - (Required) Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `id` - ID of the virtual gateway.\n* `arn` - ARN of the virtual gateway.\n* `created_date` - Creation date of the virtual gateway.\n* `last_updated_date` - Last update date of the virtual gateway.\n* `resource_owner` - Resource owner's AWS account ID.\n* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import App Mesh virtual gateway using `mesh_name` together with the virtual gateway's `name`. For example:\n\n```terraform\nimport {\n  to = aws_appmesh_virtual_gateway.example\n  id = \"mesh/gw1\"\n}\n```\n\nUsing `terraform import`, import App Mesh virtual gateway using `mesh_name` together with the virtual gateway's `name`. For example:\n\n```console\n% terraform import aws_appmesh_virtual_gateway.example mesh/gw1\n```\n\n[1]: /docs/providers/aws/index.html\n",
      "language": "hcl",
      "path": "website/docs/r/appmesh_virtual_gateway.html.markdown",
      "slug": "appmesh_virtual_gateway",
      "subcategory": "App Mesh",
      "title": "appmesh_virtual_gateway",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3197979"
    }
  }
}