{
  "data": {
    "type": "provider-docs",
    "id": "3198429",
    "attributes": {
      "category": "resources",
      "content": "---\nsubcategory: \"Glue\"\nlayout: \"aws\"\npage_title: \"AWS: aws_glue_catalog_table\"\ndescription: |-\n  Provides a Glue Catalog Table.\n---\n\n# Resource: aws_glue_catalog_table\n\nProvides a Glue Catalog Table Resource. You can refer to the [Glue Developer Guide](http://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html) for a full explanation of the Glue Data Catalog functionality.\n\n## Example Usage\n\n### Basic Table\n\n```terraform\nresource \"aws_glue_catalog_table\" \"aws_glue_catalog_table\" {\n  name          = \"MyCatalogTable\"\n  database_name = \"MyCatalogDatabase\"\n}\n```\n\n### Parquet Table for Athena\n\n```terraform\nresource \"aws_glue_catalog_table\" \"aws_glue_catalog_table\" {\n  name          = \"MyCatalogTable\"\n  database_name = \"MyCatalogDatabase\"\n\n  table_type = \"EXTERNAL_TABLE\"\n\n  parameters = {\n    EXTERNAL              = \"TRUE\"\n    \"parquet.compression\" = \"SNAPPY\"\n  }\n\n  storage_descriptor {\n    location      = \"s3://my-bucket/event-streams/my-stream\"\n    input_format  = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\"\n    output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\"\n\n    ser_de_info {\n      name                  = \"my-stream\"\n      serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\"\n\n      parameters = {\n        \"serialization.format\" = 1\n      }\n    }\n\n    columns {\n      name = \"my_string\"\n      type = \"string\"\n    }\n\n    columns {\n      name = \"my_double\"\n      type = \"double\"\n    }\n\n    columns {\n      name    = \"my_date\"\n      type    = \"date\"\n      comment = \"\"\n    }\n\n    columns {\n      name    = \"my_bigint\"\n      type    = \"bigint\"\n      comment = \"\"\n    }\n\n    columns {\n      name    = \"my_struct\"\n      type    = \"struct<my_nested_string:string>\"\n      comment = \"\"\n    }\n  }\n}\n```\n\n## Argument Reference\n\nThe following arguments are required:\n\n* `name` - (Required) Name of the table. For Hive compatibility, this must be entirely lowercase.\n* `database_name` - (Required) Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.\n\nThe follow arguments are optional:\n\n* `catalog_id` - (Optional) ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.\n* `description` - (Optional) Description of the table.\n* `owner` - (Optional) Owner of the table.\n* `open_table_format_input` - (Optional) Configuration block for open table formats. See [`open_table_format_input`](#open_table_format_input) below.\n* `parameters` - (Optional) Properties associated with this table, as a list of key-value pairs.\n* `partition_index` - (Optional) Configuration block for a maximum of 3 partition indexes. See [`partition_index`](#partition_index) below.\n* `partition_keys` - (Optional) Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See [`partition_keys`](#partition_keys) below.\n* `retention` - (Optional) Retention time for this table.\n* `storage_descriptor` - (Optional) Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See [`storage_descriptor`](#storage_descriptor) below.\n* `table_type` - (Optional) Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.\n* `target_table` - (Optional) Configuration block of a target table for resource linking. See [`target_table`](#target_table) below.\n* `view_expanded_text` - (Optional) If the table is a view, the expanded text of the view; otherwise null.\n* `view_original_text` - (Optional) If the table is a view, the original text of the view; otherwise null.\n\n### open_table_format_input\n\n~> **NOTE:** A `open_table_format_input` cannot be added to an existing `glue_catalog_table`.\nThis will destroy and recreate the table, possibly resulting in data loss.\n\n* `iceberg_input` - (Required) Configuration block for iceberg table config. See [`iceberg_input`](#iceberg_input) below.\n\n### iceberg_input\n\n~> **NOTE:** A `iceberg_input` cannot be added to an existing `open_table_format_input`.\nThis will destroy and recreate the table, possibly resulting in data loss.\n\n* `metadata_operation` - (Required) A required metadata operation. Can only be set to CREATE.\n* `version` - (Optional) The table version for the Iceberg table. Defaults to 2.\n\n### partition_index\n\n~> **NOTE:** A `partition_index` cannot be added to an existing `glue_catalog_table`.\nThis will destroy and recreate the table, possibly resulting in data loss.\nTo add an index to an existing table, see the [`glue_partition_index` resource](/docs/providers/aws/r/glue_partition_index.html) for configuration details.\n\n* `index_name` - (Required) Name of the partition index.\n* `keys` - (Required) Keys for the partition index.\n\n### partition_keys\n\n* `comment` - (Optional) Free-form text comment.\n* `name` - (Required) Name of the Partition Key.\n* `type` - (Optional) Datatype of data in the Partition Key.\n\n### storage_descriptor\n\n* `bucket_columns` - (Optional) List of reducer grouping columns, clustering columns, and bucketing columns in the table.\n* `columns` - (Optional) Configuration block for columns in the table. See [`columns`](#columns) below.\n* `compressed` - (Optional) Whether the data in the table is compressed.\n* `input_format` - (Optional) Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.\n* `location` - (Optional) Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.\n* `number_of_buckets` - (Optional) Must be specified if the table contains any dimension columns.\n* `output_format` - (Optional) Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.\n* `parameters` - (Optional) User-supplied properties in key-value form.\n* `schema_reference` - (Optional) Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See [Schema Reference](#schema_reference) below.\n* `ser_de_info` - (Optional) Configuration block for serialization and deserialization (\"SerDe\") information. See [`ser_de_info`](#ser_de_info) below.\n* `skewed_info` - (Optional) Configuration block with information about values that appear very frequently in a column (skewed values). See [`skewed_info`](#skewed_info) below.\n* `sort_columns` - (Optional) Configuration block for the sort order of each bucket in the table. See [`sort_columns`](#sort_columns) below.\n* `stored_as_sub_directories` - (Optional) Whether the table data is stored in subdirectories.\n\n#### columns\n\n* `comment` - (Optional) Free-form text comment.\n* `name` - (Required) Name of the Column.\n* `parameters` - (Optional) Key-value pairs defining properties associated with the column.\n* `type` - (Optional) Datatype of data in the Column.\n\n#### schema_reference\n\n* `schema_id` - (Optional) Configuration block that contains schema identity fields. Either this or the `schema_version_id` has to be provided. See [`schema_id`](#schema_id) below.\n* `schema_version_id` - (Optional) Unique ID assigned to a version of the schema. Either this or the `schema_id` has to be provided.\n* `schema_version_number` - (Required) Version number of the schema.\n\n##### schema_id\n\n* `registry_name` - (Optional) Name of the schema registry that contains the schema. Must be provided when `schema_name` is specified and conflicts with `schema_arn`.\n* `schema_arn` - (Optional) ARN of the schema. One of `schema_arn` or `schema_name` has to be provided.\n* `schema_name` - (Optional) Name of the schema. One of `schema_arn` or `schema_name` has to be provided.\n\n#### ser_de_info\n\n* `name` - (Optional) Name of the SerDe.\n* `parameters` - (Optional) Map of initialization parameters for the SerDe, in key-value form.\n* `serialization_library` - (Optional) Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.\n\n#### sort_columns\n\n* `column` - (Required) Name of the column.\n* `sort_order` - (Required) Whether the column is sorted in ascending (`1`) or descending order (`0`).\n\n#### skewed_info\n\n* `skewed_column_names` - (Optional) List of names of columns that contain skewed values.\n* `skewed_column_value_location_maps` - (Optional) List of values that appear so frequently as to be considered skewed.\n* `skewed_column_values` - (Optional) Map of skewed values to the columns that contain them.\n\n### target_table\n\n* `catalog_id` - (Required) ID of the Data Catalog in which the table resides.\n* `database_name` - (Required) Name of the catalog database that contains the target table.\n* `name` - (Required) Name of the target table.\n\n## Attribute Reference\n\nThis resource exports the following attributes in addition to the arguments above:\n\n* `arn` - The ARN of the Glue Table.\n* `id` - Catalog ID, Database name and of the name table.\n\n## Import\n\nIn Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Tables using the catalog ID (usually AWS account ID), database name, and table name. For example:\n\n```terraform\nimport {\n  to = aws_glue_catalog_table.MyTable\n  id = \"123456789012:MyDatabase:MyTable\"\n}\n```\n\nUsing `terraform import`, import Glue Tables using the catalog ID (usually AWS account ID), database name, and table name. For example:\n\n```console\n% terraform import aws_glue_catalog_table.MyTable 123456789012:MyDatabase:MyTable\n```\n",
      "language": "hcl",
      "path": "website/docs/r/glue_catalog_table.html.markdown",
      "slug": "glue_catalog_table",
      "subcategory": "Glue",
      "title": "glue_catalog_table",
      "truncated": false
    },
    "links": {
      "self": "/v2/provider-docs/3198429"
    }
  }
}