export interface Elb {
    resource: Resource[];
}

export interface Resource {
    elb: ElbClass;
}

export interface ElbClass {
    /** (Optional) The name of the ELB. By default generated by Terraform. */
    name?:                        any;
    /** (Optional, Forces new resource) Creates a unique name beginning with the specified */
    name_prefix?:                 any;
    /** (Optional) An Access Logs block. Access Logs documented below. */
    access_logs?:                 any;
    /** (Required for an EC2-classic ELB) The AZ's to serve traffic in. */
    availability_zones?:          any;
    /** (Optional) A list of security group IDs to assign to the ELB. */
    security_groups?:             any;
    /** (Required for a VPC ELB) A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource. */
    subnets?:                     any;
    /** (Optional) A list of instance ids to place in the ELB pool. */
    instances?:                   any;
    /** (Optional) If true, ELB will be an internal ELB. */
    internal?:                    any;
    /** (Required) A list of listener blocks. Listeners documented below. */
    listener:                     any;
    /** (Optional) A health_check block. Health Check documented below. */
    health_check?:                any;
    /** (Optional) Enable cross-zone load balancing. Default: `true` */
    cross_zone_load_balancing?:   any;
    /** (Optional) The time in seconds that the connection is allowed to be idle. Default: `60` */
    idle_timeout?:                any;
    /** (Optional) Boolean to enable connection draining. Default: `false` */
    connection_draining?:         any;
    /** (Optional) The time in seconds to allow for connections to drain. Default: `300` */
    connection_draining_timeout?: any;
    /** (Optional) Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`. */
    desync_mitigation_mode?:      any;
    /** (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. */
    tags?:                        any;
    /** (Required) The S3 bucket name to store the logs in. */
    bucket:                       any;
    /** (Optional) The S3 bucket prefix. Logs are stored in the root if not configured. */
    bucket_prefix?:               any;
    /** (Required) The interval between checks. */
    interval:                     any;
    /** (Optional) Boolean to enable / disable `access_logs`. Default is `true` */
    enabled?:                     any;
    /** (Required) The port on the instance to route to */
    instance_port:                any;
    /** (Required) The protocol to use to the instance. Valid */
    instance_protocol:            any;
    /** (Required) The port to listen on for the load balancer */
    lb_port:                      any;
    /** (Required) The protocol to listen on. Valid values are `HTTP`, */
    lb_protocol:                  any;
    /** (Optional) The ARN of an SSL certificate you have */
    ssl_certificate_id?:          any;
    /** (Required) The number of checks before the instance is declared healthy. */
    healthy_threshold:            any;
    /** (Required) The number of checks before the instance is declared unhealthy. */
    unhealthy_threshold:          any;
    /** (Required) The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL */
    target:                       any;
    /** (Required) The length of time before the check times out. */
    timeout:                      any;
}